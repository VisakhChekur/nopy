{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to NoPy! \u00b6 NoPy is an unofficial OOP interface for the Notion API . Installation \u00b6 TODO. Getting Started \u00b6 Create an instance of a NotionClient and pass in your integration token. Refer the docs to find out how to set up the integration token and more. from nopy import NotionClient client = NotionClient ( \"your-notion-integration-token\" ) db = client . retrieve_db ( \"your-db-id\" ) print ( db . title ) # The database title. print ( db . description ) # The database description. # Getting all the pages in the database. for page in db . get_pages (): print ( page . title ) # The page title. # Closing the client. client . close () Note Instead of passing in the integration token, you could instead store the token in the environment variables with the key NOTION_TOKEN .","title":"Overview"},{"location":"#welcome-to-nopy","text":"NoPy is an unofficial OOP interface for the Notion API .","title":"Welcome to NoPy!"},{"location":"#installation","text":"TODO.","title":"Installation"},{"location":"#getting-started","text":"Create an instance of a NotionClient and pass in your integration token. Refer the docs to find out how to set up the integration token and more. from nopy import NotionClient client = NotionClient ( \"your-notion-integration-token\" ) db = client . retrieve_db ( \"your-db-id\" ) print ( db . title ) # The database title. print ( db . description ) # The database description. # Getting all the pages in the database. for page in db . get_pages (): print ( page . title ) # The page title. # Closing the client. client . close () Note Instead of passing in the integration token, you could instead store the token in the environment variables with the key NOTION_TOKEN .","title":"Getting Started"},{"location":"features/","text":"Suppported Features \u00b6 The supported features by the library can be found here. More features such as blocks and comments will be added in future releases. Notion Objects \u00b6 The Notion objects that are currently supported are: databases pages users Supported Endpoints \u00b6 Databases \u00b6 retrieving a database creating a database updating a database querying a database Page \u00b6 retrieving a page creating a page updating a page retrieving a page property Retrieving a Page Property This currently does NOT return a property property object, but instead returns the raw response returned by the Notion API. Users \u00b6 retrieve user list users retrieve me (the bot associated with the given integration token)","title":"Supported Features"},{"location":"features/#suppported-features","text":"The supported features by the library can be found here. More features such as blocks and comments will be added in future releases.","title":"Suppported Features"},{"location":"features/#notion-objects","text":"The Notion objects that are currently supported are: databases pages users","title":"Notion Objects"},{"location":"features/#supported-endpoints","text":"","title":"Supported Endpoints"},{"location":"features/#databases","text":"retrieving a database creating a database updating a database querying a database","title":"Databases"},{"location":"features/#page","text":"retrieving a page creating a page updating a page retrieving a page property Retrieving a Page Property This currently does NOT return a property property object, but instead returns the raw response returned by the Notion API.","title":"Page"},{"location":"features/#users","text":"retrieve user list users retrieve me (the bot associated with the given integration token)","title":"Users"},{"location":"api_reference/client/","text":"Notion Client \u00b6 ClientConfig dataclass \u00b6 Configuration options for the Client . Attributes: Name Type Description base_url str The base url. api_version str The version of the Notion API. timeout int The number of seconds to wait before raising an error. retries int The number of retries to make before raising an error. log_level int The level of the logging. logger Optional [ logging . Logger ] The logger to use when logging. NotionClient ( token = '' , config = None ) \u00b6 The client that can be used to interact with the Notion API. Parameters: Name Type Description Default token str The Notion integration token. If it's not provided, then the token is looked for in the environment variables with the name 'NOTION_TOKEN'. '' config Optional [ Union [ dict [ str , Any ], ClientConfig ]] The options to use to configure the client with. If not provided, then the base configurations are used. None Raises: Type Description AuthenticationError Raised if the Notion token wasn't provided and it wasn't found from the environment variables. Source code in nopy/client.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 def __init__ ( self , token : str = \"\" , config : Optional [ Union [ dict [ str , Any ], ClientConfig ]] = None , ): \"\"\" Args: token: The Notion integration token. If it's not provided, then the token is looked for in the environment variables with the name 'NOTION_TOKEN'. config: The options to use to configure the client with. If not provided, then the base configurations are used. Raises: AuthenticationError: Raised if the Notion token wasn't provided and it wasn't found from the environment variables. \"\"\" try : self . token = token or os . environ [ \"NOTION_TOKEN\" ] except KeyError : msg = \"token not provided and not found with key 'NOTION_TOKEN' from the environment variables\" raise TokenNotFoundError ( msg ) if isinstance ( config , dict ): self . _config = ClientConfig ( ** config ) else : self . _config = config or ClientConfig () self . _configure_client () retrieve_db ( db_id ) \u00b6 Retreives the database. Attributes: Name Type Description db_id The id of the database to retrieve. Returns: Type Description Database A Database instance. Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def retrieve_db ( self , db_id : str ) -> Database : \"\"\"Retreives the database. Attributes: db_id: The id of the database to retrieve. Returns: A `Database` instance. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" self . _logger . info ( f \"Retrieving database { db_id } \" ) endpoint = APIEndpoints . DB_RETRIEVE . value . format ( db_id ) db_dict = self . _make_request ( endpoint ) db = Database . from_dict ( db_dict ) db . _client = self # type: ignore return db query_db ( db_id , query , max_pages = 0 ) \u00b6 Query a database. Attributes: Name Type Description db_id The id of the database to query. query The query in the Notion format. max_pages The maximum number of pages to return. If the value is 0, then all pages are returned. Returns: Type Description Generator [ Page , None, None] A generator that yields a single Page instance at a time. Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 def query_db ( self , db_id : str , query : dict [ str , Any ], max_pages : int = 0 ) -> Generator [ Page , None , None ]: \"\"\"Query a database. Attributes: db_id: The id of the database to query. query: The query in the Notion format. max_pages: The maximum number of pages to return. If the value is 0, then all pages are returned. Returns: A generator that yields a single `Page` instance at a time. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" return paginate ( self . _query_db_raw , # type: ignore Page . from_dict , max_pages = max_pages , db_id = db_id , client = self , query = query , ) create_db ( db ) \u00b6 Creates a database. Attributes: Name Type Description db The database as a dictionary in the Notion format. Returns: Type Description Database The newly created Database instance. Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 def create_db ( self , db : dict [ str , Any ]) -> Database : \"\"\"Creates a database. Attributes: db: The database as a dictionary in the Notion format. Returns: The newly created `Database` instance. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" new_db_dict = self . _make_request ( APIEndpoints . DB_CREATE . value , \"POST\" , db ) new_db = Database . from_dict ( new_db_dict ) new_db . set_client ( self ) return new_db update_db ( db_id , db ) \u00b6 Updates the given database. Attributes: Name Type Description db_id The database id. db The database as a dictionary in the Notion format. Returns: Type Description Database The updated Database instance. Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 def update_db ( self , db_id : str , db : dict [ str , Any ]) -> Database : \"\"\"Updates the given database. Attributes: db_id: The database id. db: The database as a dictionary in the Notion format. Returns: The updated `Database` instance. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" self . _logger . info ( f \"Updating ' { db_id } ' database\" ) endpoint = APIEndpoints . DB_UPDATE . value . format ( db_id ) updated_db_dict = self . _make_request ( endpoint , \"PATCH\" , db ) updated_db = Database . from_dict ( updated_db_dict ) updated_db . set_client ( self ) return updated_db retrieve_page ( page_id ) \u00b6 Retrieves a page. Attributes: Name Type Description page_id The id of the page to retrieve. Returns: Type Description Page An instance of Page . Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 def retrieve_page ( self , page_id : str ) -> Page : \"\"\"Retrieves a page. Attributes: page_id: The id of the page to retrieve. Returns: An instance of `Page`. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" self . _logger . info ( f \"Retrieving page { page_id } \" ) endpoint = APIEndpoints . PAGE_RETRIEVE . value . format ( page_id ) page_dict = self . _make_request ( endpoint ) pprint ( page_dict ) page = Page . from_dict ( page_dict ) page . set_client ( self ) return page retrieve_page_property ( page_id , prop_id ) \u00b6 Retrieves the page property. Attributes: Name Type Description page_id The page id. prop_id The property id. Returns: Type Description Any The raw dictionary as returned by Notion. Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 def retrieve_page_property ( self , page_id : str , prop_id : str ) -> Any : \"\"\"Retrieves the page property. Attributes: page_id: The page id. prop_id: The property id. Returns: The raw dictionary as returned by Notion. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" endpoint = APIEndpoints . PAGE_PROP . value . format ( page_id , prop_id ) return self . _make_request ( endpoint ) create_page ( page ) \u00b6 Creates a new page. Attributes: Name Type Description page The page as a dictionary in the Notion format. Returns: Type Description Page The newly created Page instance. Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 def create_page ( self , page : dict [ str , Any ]) -> Page : \"\"\"Creates a new page. Attributes: page: The page as a dictionary in the Notion format. Returns: The newly created `Page` instance. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" new_page_dict = self . _make_request ( APIEndpoints . PAGE_CREATE . value , \"post\" , page ) new_page = Page . from_dict ( new_page_dict ) new_page . set_client ( self ) return new_page update_page ( page_id , page ) \u00b6 Updates a page. Attributes: Name Type Description page_id The page id. page The page as a dictionary in the Notion format. Returns: Type Description Page The updated Page instance. Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 def update_page ( self , page_id : str , page : dict [ str , Any ]) -> Page : \"\"\"Updates a page. Attributes: page_id: The page id. page: The page as a dictionary in the Notion format. Returns: The updated `Page` instance. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" endpoint = APIEndpoints . PAGE_UPDATE . value . format ( page_id ) page_dict = self . _make_request ( endpoint , \"PATCH\" , page ) return Page . from_dict ( page_dict ) retrieve_user ( user_id ) \u00b6 Retrieves the user with the given id. Attributes: Name Type Description user_id The id of the user being retrieved. Returns: Type Description User An instance of User or one of it's subclasses. Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 def retrieve_user ( self , user_id : str ) -> User : \"\"\"Retrieves the user with the given id. Attributes: user_id: The id of the user being retrieved. Returns: An instance of `User` or one of it's subclasses. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" self . _logger . info ( f \"Retrieving user ' { user_id } '\" ) endpoint = APIEndpoints . USER_RETRIEVE . value . format ( user_id ) user_dict = self . _make_request ( endpoint ) return User . from_dict ( user_dict ) list_users () \u00b6 Lists all the users. Returns: Type Description Generator [ User , None, None] A generator that yields an instance of a User or one of it's Generator [ User , None, None] sbuclasses. Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 def list_users ( self ) -> Generator [ User , None , None ]: \"\"\"Lists all the users. Returns: A generator that yields an instance of a `User` or one of it's sbuclasses. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" self . _logger . info ( \"Listing users...\" ) return paginate ( self . _list_users_raw , User . from_dict ) retrieve_me () \u00b6 Retrieves the user associated with the given NOTION_TOKEN . Returns: Type Description Bot An instance of Bot . Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 def retrieve_me ( self ) -> Bot : \"\"\"Retrieves the user associated with the given `NOTION_TOKEN`. Returns: An instance of `Bot`. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" self . _logger . info ( \"Retreiving 'me'\" ) bot_dict = self . _make_request ( APIEndpoints . USER_TOKEN_BOT . value ) return Bot . from_dict ( bot_dict ) close () \u00b6 Closes the client and cleans up all the resources. Source code in nopy/client.py 329 330 331 332 def close ( self ): \"\"\"Closes the client and cleans up all the resources.\"\"\" self . _client . close ()","title":"Client"},{"location":"api_reference/client/#notion-client","text":"","title":"Notion Client"},{"location":"api_reference/client/#nopy.client.ClientConfig","text":"Configuration options for the Client . Attributes: Name Type Description base_url str The base url. api_version str The version of the Notion API. timeout int The number of seconds to wait before raising an error. retries int The number of retries to make before raising an error. log_level int The level of the logging. logger Optional [ logging . Logger ] The logger to use when logging.","title":"ClientConfig"},{"location":"api_reference/client/#nopy.client.NotionClient","text":"The client that can be used to interact with the Notion API. Parameters: Name Type Description Default token str The Notion integration token. If it's not provided, then the token is looked for in the environment variables with the name 'NOTION_TOKEN'. '' config Optional [ Union [ dict [ str , Any ], ClientConfig ]] The options to use to configure the client with. If not provided, then the base configurations are used. None Raises: Type Description AuthenticationError Raised if the Notion token wasn't provided and it wasn't found from the environment variables. Source code in nopy/client.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 def __init__ ( self , token : str = \"\" , config : Optional [ Union [ dict [ str , Any ], ClientConfig ]] = None , ): \"\"\" Args: token: The Notion integration token. If it's not provided, then the token is looked for in the environment variables with the name 'NOTION_TOKEN'. config: The options to use to configure the client with. If not provided, then the base configurations are used. Raises: AuthenticationError: Raised if the Notion token wasn't provided and it wasn't found from the environment variables. \"\"\" try : self . token = token or os . environ [ \"NOTION_TOKEN\" ] except KeyError : msg = \"token not provided and not found with key 'NOTION_TOKEN' from the environment variables\" raise TokenNotFoundError ( msg ) if isinstance ( config , dict ): self . _config = ClientConfig ( ** config ) else : self . _config = config or ClientConfig () self . _configure_client ()","title":"NotionClient"},{"location":"api_reference/client/#nopy.client.NotionClient.retrieve_db","text":"Retreives the database. Attributes: Name Type Description db_id The id of the database to retrieve. Returns: Type Description Database A Database instance. Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 def retrieve_db ( self , db_id : str ) -> Database : \"\"\"Retreives the database. Attributes: db_id: The id of the database to retrieve. Returns: A `Database` instance. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" self . _logger . info ( f \"Retrieving database { db_id } \" ) endpoint = APIEndpoints . DB_RETRIEVE . value . format ( db_id ) db_dict = self . _make_request ( endpoint ) db = Database . from_dict ( db_dict ) db . _client = self # type: ignore return db","title":"retrieve_db()"},{"location":"api_reference/client/#nopy.client.NotionClient.query_db","text":"Query a database. Attributes: Name Type Description db_id The id of the database to query. query The query in the Notion format. max_pages The maximum number of pages to return. If the value is 0, then all pages are returned. Returns: Type Description Generator [ Page , None, None] A generator that yields a single Page instance at a time. Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 def query_db ( self , db_id : str , query : dict [ str , Any ], max_pages : int = 0 ) -> Generator [ Page , None , None ]: \"\"\"Query a database. Attributes: db_id: The id of the database to query. query: The query in the Notion format. max_pages: The maximum number of pages to return. If the value is 0, then all pages are returned. Returns: A generator that yields a single `Page` instance at a time. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" return paginate ( self . _query_db_raw , # type: ignore Page . from_dict , max_pages = max_pages , db_id = db_id , client = self , query = query , )","title":"query_db()"},{"location":"api_reference/client/#nopy.client.NotionClient.create_db","text":"Creates a database. Attributes: Name Type Description db The database as a dictionary in the Notion format. Returns: Type Description Database The newly created Database instance. Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 def create_db ( self , db : dict [ str , Any ]) -> Database : \"\"\"Creates a database. Attributes: db: The database as a dictionary in the Notion format. Returns: The newly created `Database` instance. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" new_db_dict = self . _make_request ( APIEndpoints . DB_CREATE . value , \"POST\" , db ) new_db = Database . from_dict ( new_db_dict ) new_db . set_client ( self ) return new_db","title":"create_db()"},{"location":"api_reference/client/#nopy.client.NotionClient.update_db","text":"Updates the given database. Attributes: Name Type Description db_id The database id. db The database as a dictionary in the Notion format. Returns: Type Description Database The updated Database instance. Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 def update_db ( self , db_id : str , db : dict [ str , Any ]) -> Database : \"\"\"Updates the given database. Attributes: db_id: The database id. db: The database as a dictionary in the Notion format. Returns: The updated `Database` instance. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" self . _logger . info ( f \"Updating ' { db_id } ' database\" ) endpoint = APIEndpoints . DB_UPDATE . value . format ( db_id ) updated_db_dict = self . _make_request ( endpoint , \"PATCH\" , db ) updated_db = Database . from_dict ( updated_db_dict ) updated_db . set_client ( self ) return updated_db","title":"update_db()"},{"location":"api_reference/client/#nopy.client.NotionClient.retrieve_page","text":"Retrieves a page. Attributes: Name Type Description page_id The id of the page to retrieve. Returns: Type Description Page An instance of Page . Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 def retrieve_page ( self , page_id : str ) -> Page : \"\"\"Retrieves a page. Attributes: page_id: The id of the page to retrieve. Returns: An instance of `Page`. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" self . _logger . info ( f \"Retrieving page { page_id } \" ) endpoint = APIEndpoints . PAGE_RETRIEVE . value . format ( page_id ) page_dict = self . _make_request ( endpoint ) pprint ( page_dict ) page = Page . from_dict ( page_dict ) page . set_client ( self ) return page","title":"retrieve_page()"},{"location":"api_reference/client/#nopy.client.NotionClient.retrieve_page_property","text":"Retrieves the page property. Attributes: Name Type Description page_id The page id. prop_id The property id. Returns: Type Description Any The raw dictionary as returned by Notion. Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 def retrieve_page_property ( self , page_id : str , prop_id : str ) -> Any : \"\"\"Retrieves the page property. Attributes: page_id: The page id. prop_id: The property id. Returns: The raw dictionary as returned by Notion. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" endpoint = APIEndpoints . PAGE_PROP . value . format ( page_id , prop_id ) return self . _make_request ( endpoint )","title":"retrieve_page_property()"},{"location":"api_reference/client/#nopy.client.NotionClient.create_page","text":"Creates a new page. Attributes: Name Type Description page The page as a dictionary in the Notion format. Returns: Type Description Page The newly created Page instance. Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 def create_page ( self , page : dict [ str , Any ]) -> Page : \"\"\"Creates a new page. Attributes: page: The page as a dictionary in the Notion format. Returns: The newly created `Page` instance. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" new_page_dict = self . _make_request ( APIEndpoints . PAGE_CREATE . value , \"post\" , page ) new_page = Page . from_dict ( new_page_dict ) new_page . set_client ( self ) return new_page","title":"create_page()"},{"location":"api_reference/client/#nopy.client.NotionClient.update_page","text":"Updates a page. Attributes: Name Type Description page_id The page id. page The page as a dictionary in the Notion format. Returns: Type Description Page The updated Page instance. Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 def update_page ( self , page_id : str , page : dict [ str , Any ]) -> Page : \"\"\"Updates a page. Attributes: page_id: The page id. page: The page as a dictionary in the Notion format. Returns: The updated `Page` instance. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" endpoint = APIEndpoints . PAGE_UPDATE . value . format ( page_id ) page_dict = self . _make_request ( endpoint , \"PATCH\" , page ) return Page . from_dict ( page_dict )","title":"update_page()"},{"location":"api_reference/client/#nopy.client.NotionClient.retrieve_user","text":"Retrieves the user with the given id. Attributes: Name Type Description user_id The id of the user being retrieved. Returns: Type Description User An instance of User or one of it's subclasses. Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 def retrieve_user ( self , user_id : str ) -> User : \"\"\"Retrieves the user with the given id. Attributes: user_id: The id of the user being retrieved. Returns: An instance of `User` or one of it's subclasses. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" self . _logger . info ( f \"Retrieving user ' { user_id } '\" ) endpoint = APIEndpoints . USER_RETRIEVE . value . format ( user_id ) user_dict = self . _make_request ( endpoint ) return User . from_dict ( user_dict )","title":"retrieve_user()"},{"location":"api_reference/client/#nopy.client.NotionClient.list_users","text":"Lists all the users. Returns: Type Description Generator [ User , None, None] A generator that yields an instance of a User or one of it's Generator [ User , None, None] sbuclasses. Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 def list_users ( self ) -> Generator [ User , None , None ]: \"\"\"Lists all the users. Returns: A generator that yields an instance of a `User` or one of it's sbuclasses. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" self . _logger . info ( \"Listing users...\" ) return paginate ( self . _list_users_raw , User . from_dict )","title":"list_users()"},{"location":"api_reference/client/#nopy.client.NotionClient.retrieve_me","text":"Retrieves the user associated with the given NOTION_TOKEN . Returns: Type Description Bot An instance of Bot . Raises: Type Description APIResponseError Raised when the Notion API returns a status code that's not 2xx. HTTPError Raised when there's some error when making the API call. Source code in nopy/client.py 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 def retrieve_me ( self ) -> Bot : \"\"\"Retrieves the user associated with the given `NOTION_TOKEN`. Returns: An instance of `Bot`. Raises: APIResponseError: Raised when the Notion API returns a status code that's not 2xx. HTTPError: Raised when there's some error when making the API call. \"\"\" self . _logger . info ( \"Retreiving 'me'\" ) bot_dict = self . _make_request ( APIEndpoints . USER_TOKEN_BOT . value ) return Bot . from_dict ( bot_dict )","title":"retrieve_me()"},{"location":"api_reference/client/#nopy.client.NotionClient.close","text":"Closes the client and cleans up all the resources. Source code in nopy/client.py 329 330 331 332 def close ( self ): \"\"\"Closes the client and cleans up all the resources.\"\"\" self . _client . close ()","title":"close()"},{"location":"api_reference/enums/","text":"Enums \u00b6 Colors \u00b6 Bases: Enum The different colors. Attributes: Name Type Description DEFAULT The default color. GRAY A gray color. BROWN A brown color. ORANGE A orange color. YELLOW A yellow color. GREEN A green color. BLUE A blue color. PURPLE A purple color. PINK A pink color. RED A red color. GRAY_BACKGROUND A gray background color. BROWN_BACKGROUND A brown background color. ORANGE_BACKGROUND A orange background color. YELLOW_BACKGROUND A yellow background color. GREEN_BACKGROUND A green background color. BLUE_BACKGROUND A blue background color. PURPLE_BACKGROUND A purple background color. PINK_BACKGROUND A pink background color. RED_BACKGROUND A red background color. FileTypes \u00b6 Bases: Enum The different file types. Attributes: Name Type Description FILE A file hosted by Notion. EXTERNAL A file hosted externally, but rendered by Notion. MentionTypes \u00b6 Bases: Enum The different mention types. Attributes: Name Type Description UNSUPPORTED An unsupported mention type. USER A user mention. PAGE A page mention. DATABASE A database mention. DATE A date mention. LINK_PREVIEW A link preview mention. NumberFormat \u00b6 Bases: Enum The different types of number formats possible. Attributes: Name Type Description NUMBER A number format. NUMBER_WITH_COMMAS A number with commas format. PERCENT A percent format. DOLLAR A dollar format. CANADIAN_DOLLAR A canadian dollar format. EURO A euro format. POUND A pound format. YEN A yen format. RUBLE A ruble format. RUPEE A rupee format. WON A won format. YUAN A yuan format. REAL A real format. LIRA A lira format. RUPIAH A rupiah format. FRANC A franc format. HONG_KONG_DOLLAR A hong kong dollar format. NEW_ZEALAND_DOLLAR A new zealand dollar format. KRONA A krona format. NORWEGIAN_KRONE A norwegian krone format. MEXICAN_PESO A mexican peso format. RAND A rand format. NEW_TAIWAN_DOLLAR A new taiwan dollar format. DANISH_KRONE A danish krone format. ZLOTY A zloty format. BAHT A baht format. FORINT A forint format. KORUNA A koruna format. SHEKEL A shekel format. CHILEAN_PESO A chilean peso format. PHILIPPINE_PESO A philippine peso format. DIRHAM A dirham format. COLOMBIAN_PESO A colombian peso format. RIYAL A riyal format. RINGGIT A ringgit format. LEU A leu format. ARGENTINE_PESO A argentine peso format. URUGUAYAN_PESO A uruguayan peso format. SINGAPORE_DOLLAR A singapore dollar format. ObjectTypes \u00b6 Bases: Enum The different object types. Attributes: Name Type Description DATABASE A database object. PAGE A page object. BLOCK A block object. COMMENT A comment object. USER A user object. UNSUPPORTED An unsupported object. ParentTypes \u00b6 Bases: Enum The different parent types. Attributes: Name Type Description DATABASE ParentTypes A database parent. PAGE ParentTypes A page parent. BLOCK ParentTypes A block parent. WORKSPACE ParentTypes A workspace parent. UNSUPPORTED ParentTypes An unsupported parent. PropTypes \u00b6 Bases: Enum The different prop types. Attributes: Name Type Description UNSUPPORTED An unsupported property type. CHECKBOX A checkbox property type. CREATED_BY A created by property type. CREATED_TIME A created time property type. DATE A date property type. EMAIL A email property type. FILES A files property type. FORMULA A formula property type. LAST_EDITED_BY A last edited by property type. LAST_EDITED_TIME A last edited time property type. MULTI_SELECT A multi select property type. NUMBER A number property type. PEOPLE A people property type. PHONE_NUMBER A phone number property type. RELATION A relation property type. ROLLUP A rollup property type. RICH_TEXT A rich text property type. SELECT A select property type. STATUS A status property type. TITLE A title property type. URL A url property type. RichTextTypes \u00b6 Bases: Enum The different rich text types. Attributes: Name Type Description UNSUPPORTED An unsupported rich text type. TEXT A 'text' rich text. MENTION A 'mention' rich text. EQUATION An 'equation' rich text. RollupFunctions \u00b6 Bases: Enum All the rollup functions. Attributes: Name Type Description COUNT A 'count' function. COUNT_VALUES A 'count values' function. EMPTY A 'empty' function. NOT_EMPTY A 'not empty' function. UNIQUE A 'unique' function. SHOW_UNIQUE A 'show unique' function. PERCENT_EMPTY A 'percent empty' function. PERCENT_NOT_EMPTY A 'percent not empty' function. SUM A 'sum' function. AVERAGE A 'average' function. MEDIAN A 'median' function. MIN A 'min' function. MAX A 'max' function. RANGE A 'range' function. EARLIEST_DATE A 'earliest date' function. LATEST_DATE A 'latest date' function. DATE_RANGE A 'date range' function. CHECKED A 'checked' function. UNCHECKED A 'unchecked' function. PERCENT_CHECKED A 'percent checked' function. PERCENT_UNCHECKED A 'percent unchecked' function. COUNT_PER_GROUP A 'count per group' function. PERCENT_PER_GROUP A 'percent per group' function. SHOW_ORIGINAL A 'show original' function. UserTypes \u00b6 Bases: Enum The different user types. Attributes: Name Type Description UNSPPORTED An unsupported user type. PERSON A 'person' type user. BOT A 'bot' type user.","title":"Enums"},{"location":"api_reference/enums/#enums","text":"","title":"Enums"},{"location":"api_reference/enums/#nopy.enums.Colors","text":"Bases: Enum The different colors. Attributes: Name Type Description DEFAULT The default color. GRAY A gray color. BROWN A brown color. ORANGE A orange color. YELLOW A yellow color. GREEN A green color. BLUE A blue color. PURPLE A purple color. PINK A pink color. RED A red color. GRAY_BACKGROUND A gray background color. BROWN_BACKGROUND A brown background color. ORANGE_BACKGROUND A orange background color. YELLOW_BACKGROUND A yellow background color. GREEN_BACKGROUND A green background color. BLUE_BACKGROUND A blue background color. PURPLE_BACKGROUND A purple background color. PINK_BACKGROUND A pink background color. RED_BACKGROUND A red background color.","title":"Colors"},{"location":"api_reference/enums/#nopy.enums.FileTypes","text":"Bases: Enum The different file types. Attributes: Name Type Description FILE A file hosted by Notion. EXTERNAL A file hosted externally, but rendered by Notion.","title":"FileTypes"},{"location":"api_reference/enums/#nopy.enums.MentionTypes","text":"Bases: Enum The different mention types. Attributes: Name Type Description UNSUPPORTED An unsupported mention type. USER A user mention. PAGE A page mention. DATABASE A database mention. DATE A date mention. LINK_PREVIEW A link preview mention.","title":"MentionTypes"},{"location":"api_reference/enums/#nopy.enums.NumberFormat","text":"Bases: Enum The different types of number formats possible. Attributes: Name Type Description NUMBER A number format. NUMBER_WITH_COMMAS A number with commas format. PERCENT A percent format. DOLLAR A dollar format. CANADIAN_DOLLAR A canadian dollar format. EURO A euro format. POUND A pound format. YEN A yen format. RUBLE A ruble format. RUPEE A rupee format. WON A won format. YUAN A yuan format. REAL A real format. LIRA A lira format. RUPIAH A rupiah format. FRANC A franc format. HONG_KONG_DOLLAR A hong kong dollar format. NEW_ZEALAND_DOLLAR A new zealand dollar format. KRONA A krona format. NORWEGIAN_KRONE A norwegian krone format. MEXICAN_PESO A mexican peso format. RAND A rand format. NEW_TAIWAN_DOLLAR A new taiwan dollar format. DANISH_KRONE A danish krone format. ZLOTY A zloty format. BAHT A baht format. FORINT A forint format. KORUNA A koruna format. SHEKEL A shekel format. CHILEAN_PESO A chilean peso format. PHILIPPINE_PESO A philippine peso format. DIRHAM A dirham format. COLOMBIAN_PESO A colombian peso format. RIYAL A riyal format. RINGGIT A ringgit format. LEU A leu format. ARGENTINE_PESO A argentine peso format. URUGUAYAN_PESO A uruguayan peso format. SINGAPORE_DOLLAR A singapore dollar format.","title":"NumberFormat"},{"location":"api_reference/enums/#nopy.enums.ObjectTypes","text":"Bases: Enum The different object types. Attributes: Name Type Description DATABASE A database object. PAGE A page object. BLOCK A block object. COMMENT A comment object. USER A user object. UNSUPPORTED An unsupported object.","title":"ObjectTypes"},{"location":"api_reference/enums/#nopy.enums.ParentTypes","text":"Bases: Enum The different parent types. Attributes: Name Type Description DATABASE ParentTypes A database parent. PAGE ParentTypes A page parent. BLOCK ParentTypes A block parent. WORKSPACE ParentTypes A workspace parent. UNSUPPORTED ParentTypes An unsupported parent.","title":"ParentTypes"},{"location":"api_reference/enums/#nopy.enums.PropTypes","text":"Bases: Enum The different prop types. Attributes: Name Type Description UNSUPPORTED An unsupported property type. CHECKBOX A checkbox property type. CREATED_BY A created by property type. CREATED_TIME A created time property type. DATE A date property type. EMAIL A email property type. FILES A files property type. FORMULA A formula property type. LAST_EDITED_BY A last edited by property type. LAST_EDITED_TIME A last edited time property type. MULTI_SELECT A multi select property type. NUMBER A number property type. PEOPLE A people property type. PHONE_NUMBER A phone number property type. RELATION A relation property type. ROLLUP A rollup property type. RICH_TEXT A rich text property type. SELECT A select property type. STATUS A status property type. TITLE A title property type. URL A url property type.","title":"PropTypes"},{"location":"api_reference/enums/#nopy.enums.RichTextTypes","text":"Bases: Enum The different rich text types. Attributes: Name Type Description UNSUPPORTED An unsupported rich text type. TEXT A 'text' rich text. MENTION A 'mention' rich text. EQUATION An 'equation' rich text.","title":"RichTextTypes"},{"location":"api_reference/enums/#nopy.enums.RollupFunctions","text":"Bases: Enum All the rollup functions. Attributes: Name Type Description COUNT A 'count' function. COUNT_VALUES A 'count values' function. EMPTY A 'empty' function. NOT_EMPTY A 'not empty' function. UNIQUE A 'unique' function. SHOW_UNIQUE A 'show unique' function. PERCENT_EMPTY A 'percent empty' function. PERCENT_NOT_EMPTY A 'percent not empty' function. SUM A 'sum' function. AVERAGE A 'average' function. MEDIAN A 'median' function. MIN A 'min' function. MAX A 'max' function. RANGE A 'range' function. EARLIEST_DATE A 'earliest date' function. LATEST_DATE A 'latest date' function. DATE_RANGE A 'date range' function. CHECKED A 'checked' function. UNCHECKED A 'unchecked' function. PERCENT_CHECKED A 'percent checked' function. PERCENT_UNCHECKED A 'percent unchecked' function. COUNT_PER_GROUP A 'count per group' function. PERCENT_PER_GROUP A 'percent per group' function. SHOW_ORIGINAL A 'show original' function.","title":"RollupFunctions"},{"location":"api_reference/enums/#nopy.enums.UserTypes","text":"Bases: Enum The different user types. Attributes: Name Type Description UNSPPORTED An unsupported user type. PERSON A 'person' type user. BOT A 'bot' type user.","title":"UserTypes"},{"location":"api_reference/errors/","text":"Exceptions \u00b6 Info The errors returned by Notion can be found here . NopyError ( message ) \u00b6 Bases: Exception Base exception from which all Nopy errors inherit. This exception can be caught to catch all possible errors that may take place via the package. Attributes: Name Type Description message str The error message. Source code in nopy/errors.py 19 20 21 22 def __init__ ( self , message : str ): self . message : str = message super () . __init__ ( message ) TokenNotFoundError \u00b6 Bases: NopyError Error raised when no Notion token was found. Attributes: Name Type Description message str The error message. HTTPError ( response , message = '' ) \u00b6 Bases: NopyError Encompasses all errors that took place during the request to the Notion API. Attributes: Name Type Description message str The error message. status_code int The status code of the response. headers int The headers returned by the response. body httpx . Headers The body of the response as a string. Source code in nopy/errors.py 46 47 48 49 50 51 52 53 54 def __init__ ( self , response : httpx . Response , message : str = \"\" ): if not message : message = f \"Request to the Notion API failed with status code: { response . status_code } \" super () . __init__ ( message ) self . status_code : int = response . status_code self . message : str = response . text self . body : httpx . Headers = response . headers APIResponseError ( response , code , message ) \u00b6 Bases: HTTPError Encompasses any error that is returned by the Notion API. Attributes: Name Type Description code str The error code returned by Notion. message str The error message returned by Notion. Source code in nopy/errors.py 65 66 67 68 69 70 71 def __init__ ( self , response : httpx . Response , code : str , message : str ): error_message = f \" { code . upper () } - { message } \" super () . __init__ ( response , error_message ) self . code : str = code self . message : str = message UnuspportedError \u00b6 Bases: NopyError An error raised when the user tries to do something that's not supported by the library or via the Notion API. Attributes: Name Type Description message str The error message. UnsupportedByLibraryError ( message ) \u00b6 Bases: UnuspportedError An error raised when the user tries to do something that's not supported by the library currently. Attributes: Name Type Description message str The error message. Source code in nopy/errors.py 93 94 95 96 def __init__ ( self , message : str ): message += \" is currently unsupported by the library\" super () . __init__ ( message ) UnsupportedByNotion ( message ) \u00b6 Bases: UnuspportedError An error raised when the user tries to do something that's not supported by the Notion API currently. Attributes: Name Type Description message str The error message. Source code in nopy/errors.py 107 108 109 def __init__ ( self , message : str ): message += \" is currently unsupported by the Notion API\" super () . __init__ ( message ) NoClientFoundError ( message ) \u00b6 Bases: NopyError An error raised when the user tries to make an API call via a Notion Object that doesn't have a client. Attributes: Name Type Description message str The error message. Source code in nopy/errors.py 120 121 122 123 def __init__ ( self , message : str ): message += \" has no client set\" super () . __init__ ( message ) PropertyExistsError \u00b6 Bases: NopyError Raised when the property already exists. PropertyNotFoundError \u00b6 Bases: NopyError Raised when the property is not found. SerializationError ( message , prop ) \u00b6 Bases: NopyError Raised when there's some error during serialization. Source code in nopy/errors.py 141 142 143 144 145 def __init__ ( self , message : str , prop : \"Props\" ): self . prop : \"Props\" = prop message += f \" for ' { prop . type . value } ' properties\" super () . __init__ ( message )","title":"Exceptions"},{"location":"api_reference/errors/#exceptions","text":"Info The errors returned by Notion can be found here .","title":"Exceptions"},{"location":"api_reference/errors/#nopy.errors.NopyError","text":"Bases: Exception Base exception from which all Nopy errors inherit. This exception can be caught to catch all possible errors that may take place via the package. Attributes: Name Type Description message str The error message. Source code in nopy/errors.py 19 20 21 22 def __init__ ( self , message : str ): self . message : str = message super () . __init__ ( message )","title":"NopyError"},{"location":"api_reference/errors/#nopy.errors.TokenNotFoundError","text":"Bases: NopyError Error raised when no Notion token was found. Attributes: Name Type Description message str The error message.","title":"TokenNotFoundError"},{"location":"api_reference/errors/#nopy.errors.HTTPError","text":"Bases: NopyError Encompasses all errors that took place during the request to the Notion API. Attributes: Name Type Description message str The error message. status_code int The status code of the response. headers int The headers returned by the response. body httpx . Headers The body of the response as a string. Source code in nopy/errors.py 46 47 48 49 50 51 52 53 54 def __init__ ( self , response : httpx . Response , message : str = \"\" ): if not message : message = f \"Request to the Notion API failed with status code: { response . status_code } \" super () . __init__ ( message ) self . status_code : int = response . status_code self . message : str = response . text self . body : httpx . Headers = response . headers","title":"HTTPError"},{"location":"api_reference/errors/#nopy.errors.APIResponseError","text":"Bases: HTTPError Encompasses any error that is returned by the Notion API. Attributes: Name Type Description code str The error code returned by Notion. message str The error message returned by Notion. Source code in nopy/errors.py 65 66 67 68 69 70 71 def __init__ ( self , response : httpx . Response , code : str , message : str ): error_message = f \" { code . upper () } - { message } \" super () . __init__ ( response , error_message ) self . code : str = code self . message : str = message","title":"APIResponseError"},{"location":"api_reference/errors/#nopy.errors.UnuspportedError","text":"Bases: NopyError An error raised when the user tries to do something that's not supported by the library or via the Notion API. Attributes: Name Type Description message str The error message.","title":"UnuspportedError"},{"location":"api_reference/errors/#nopy.errors.UnsupportedByLibraryError","text":"Bases: UnuspportedError An error raised when the user tries to do something that's not supported by the library currently. Attributes: Name Type Description message str The error message. Source code in nopy/errors.py 93 94 95 96 def __init__ ( self , message : str ): message += \" is currently unsupported by the library\" super () . __init__ ( message )","title":"UnsupportedByLibraryError"},{"location":"api_reference/errors/#nopy.errors.UnsupportedByNotion","text":"Bases: UnuspportedError An error raised when the user tries to do something that's not supported by the Notion API currently. Attributes: Name Type Description message str The error message. Source code in nopy/errors.py 107 108 109 def __init__ ( self , message : str ): message += \" is currently unsupported by the Notion API\" super () . __init__ ( message )","title":"UnsupportedByNotion"},{"location":"api_reference/errors/#nopy.errors.NoClientFoundError","text":"Bases: NopyError An error raised when the user tries to make an API call via a Notion Object that doesn't have a client. Attributes: Name Type Description message str The error message. Source code in nopy/errors.py 120 121 122 123 def __init__ ( self , message : str ): message += \" has no client set\" super () . __init__ ( message )","title":"NoClientFoundError"},{"location":"api_reference/errors/#nopy.errors.PropertyExistsError","text":"Bases: NopyError Raised when the property already exists.","title":"PropertyExistsError"},{"location":"api_reference/errors/#nopy.errors.PropertyNotFoundError","text":"Bases: NopyError Raised when the property is not found.","title":"PropertyNotFoundError"},{"location":"api_reference/errors/#nopy.errors.SerializationError","text":"Bases: NopyError Raised when there's some error during serialization. Source code in nopy/errors.py 141 142 143 144 145 def __init__ ( self , message : str , prop : \"Props\" ): self . prop : \"Props\" = prop message += f \" for ' { prop . type . value } ' properties\" super () . __init__ ( message )","title":"SerializationError"},{"location":"api_reference/filters/","text":"Filters \u00b6 Info The official Notion API docs for sorts can be found here . Filter dataclass \u00b6 A filter object. Attributes: Name Type Description prop Union [ DBProps , str ] The property or the id of the property to filter. filter Union [ PropFilter , dict [ str , Any ]] The filter to apply on the property. TextFilter dataclass \u00b6 Bases: PropFilter A filter for text properties. Attributes: Name Type Description equals Optional [ str ] Property value is an exact match. does_not_equal Optional [ str ] Property value does not match exactly. contains Optional [ str ] Property value contains the string. does_not_contain Optional [ str ] Property value does not contain the string. starts_with Optional [ str ] Property value start with the string. ends_with Optional [ str ] Property value ends with the string. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty. NumberFilter dataclass \u00b6 Bases: PropFilter A filter for number properties. Attributes: Name Type Description equals Optional [ Number ] Property value is an exact match. does_not_equal Optional [ Number ] Property value is not an exact match. greater_than Optional [ Number ] Property value is greater than the number. less_than Optional [ Number ] Property value is less than the number. greater_than_or_equal_to Optional [ Number ] Property value is greater than or equal to the number. less_than_or_equal_to Optional [ Number ] Property value is less than or equal to the the number. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty. CheckboxFilter dataclass \u00b6 Bases: PropFilter A filter for checkbox properties. Attributes: Name Type Description equals Optional [ bool ] Property value matches the boolean. does_not_equal Optional [ bool ] Property value does not match the boolean. SelectFilter dataclass \u00b6 Bases: PropFilter A filter for a select property. Attributes: Name Type Description equals Optional [ str ] Property value matches the string. does_not_equal Optional [ str ] Property value does not match the string. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty. MultiSelectFilter dataclass \u00b6 Bases: PropFilter A filter for a multi select property. Attributes: Name Type Description contains Optional [ str ] Property value contains the string. does_not_contains Optional [ str ] Property value does not contain the string. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty. StatusFilter dataclass \u00b6 Bases: PropFilter A filter for a status property. Attributes: Name Type Description equals Optional [ str ] Property value matches the string. does_not_equal Optional [ str ] Property value does not match the string. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty. DateFilter dataclass \u00b6 Bases: PropFilter A filter for date properties. Attributes: Name Type Description equals Optional [ datetime ] The property value equals the date. before Optional [ datetime ] The property value is before the date. after Optional [ datetime ] The property value is after the date. on_or_before Optional [ datetime ] The property value is on or before the date. on_or_after Optional [ datetime ] The property value is on or after the date. past_week Optional [ Literal [True]] The property value is within the past week. past_month Optional [ Literal [True]] The property value is within the past month. past_year Optional [ Literal [True]] The property value is within the past year. this_week Optional [ Literal [True]] The property value is within this week. next_week Optional [ Literal [True]] The property value is within next week. next_month Optional [ Literal [True]] The property value is within next month. next_year Optional [ Literal [True]] The property value is within next year. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty. FilesFilter dataclass \u00b6 Bases: PropFilter A filter for files properties. Attributes: Name Type Description is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty. FormulaFilter dataclass \u00b6 Bases: PropFilter A filter for formula properties. Attributes: Name Type Description string Optional [ TextFilter ] The result of formula is 'string' and property value matches the filter. checkbox Optional [ CheckboxFilter ] The result of the formula is 'checkbox' and property value matches the filter. number Optional [ NumberFilter ] The result of the formula is 'number' and property value matches the filter. date Optional [ DateFilter ] The result of the formula is 'date' and property value matches the filter.","title":"Filters"},{"location":"api_reference/filters/#filters","text":"Info The official Notion API docs for sorts can be found here .","title":"Filters"},{"location":"api_reference/filters/#nopy.filters.Filter","text":"A filter object. Attributes: Name Type Description prop Union [ DBProps , str ] The property or the id of the property to filter. filter Union [ PropFilter , dict [ str , Any ]] The filter to apply on the property.","title":"Filter"},{"location":"api_reference/filters/#nopy.filters.TextFilter","text":"Bases: PropFilter A filter for text properties. Attributes: Name Type Description equals Optional [ str ] Property value is an exact match. does_not_equal Optional [ str ] Property value does not match exactly. contains Optional [ str ] Property value contains the string. does_not_contain Optional [ str ] Property value does not contain the string. starts_with Optional [ str ] Property value start with the string. ends_with Optional [ str ] Property value ends with the string. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty.","title":"TextFilter"},{"location":"api_reference/filters/#nopy.filters.NumberFilter","text":"Bases: PropFilter A filter for number properties. Attributes: Name Type Description equals Optional [ Number ] Property value is an exact match. does_not_equal Optional [ Number ] Property value is not an exact match. greater_than Optional [ Number ] Property value is greater than the number. less_than Optional [ Number ] Property value is less than the number. greater_than_or_equal_to Optional [ Number ] Property value is greater than or equal to the number. less_than_or_equal_to Optional [ Number ] Property value is less than or equal to the the number. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty.","title":"NumberFilter"},{"location":"api_reference/filters/#nopy.filters.CheckboxFilter","text":"Bases: PropFilter A filter for checkbox properties. Attributes: Name Type Description equals Optional [ bool ] Property value matches the boolean. does_not_equal Optional [ bool ] Property value does not match the boolean.","title":"CheckboxFilter"},{"location":"api_reference/filters/#nopy.filters.SelectFilter","text":"Bases: PropFilter A filter for a select property. Attributes: Name Type Description equals Optional [ str ] Property value matches the string. does_not_equal Optional [ str ] Property value does not match the string. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty.","title":"SelectFilter"},{"location":"api_reference/filters/#nopy.filters.MultiSelectFilter","text":"Bases: PropFilter A filter for a multi select property. Attributes: Name Type Description contains Optional [ str ] Property value contains the string. does_not_contains Optional [ str ] Property value does not contain the string. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty.","title":"MultiSelectFilter"},{"location":"api_reference/filters/#nopy.filters.StatusFilter","text":"Bases: PropFilter A filter for a status property. Attributes: Name Type Description equals Optional [ str ] Property value matches the string. does_not_equal Optional [ str ] Property value does not match the string. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty.","title":"StatusFilter"},{"location":"api_reference/filters/#nopy.filters.DateFilter","text":"Bases: PropFilter A filter for date properties. Attributes: Name Type Description equals Optional [ datetime ] The property value equals the date. before Optional [ datetime ] The property value is before the date. after Optional [ datetime ] The property value is after the date. on_or_before Optional [ datetime ] The property value is on or before the date. on_or_after Optional [ datetime ] The property value is on or after the date. past_week Optional [ Literal [True]] The property value is within the past week. past_month Optional [ Literal [True]] The property value is within the past month. past_year Optional [ Literal [True]] The property value is within the past year. this_week Optional [ Literal [True]] The property value is within this week. next_week Optional [ Literal [True]] The property value is within next week. next_month Optional [ Literal [True]] The property value is within next month. next_year Optional [ Literal [True]] The property value is within next year. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty.","title":"DateFilter"},{"location":"api_reference/filters/#nopy.filters.FilesFilter","text":"Bases: PropFilter A filter for files properties. Attributes: Name Type Description is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty.","title":"FilesFilter"},{"location":"api_reference/filters/#nopy.filters.FormulaFilter","text":"Bases: PropFilter A filter for formula properties. Attributes: Name Type Description string Optional [ TextFilter ] The result of formula is 'string' and property value matches the filter. checkbox Optional [ CheckboxFilter ] The result of the formula is 'checkbox' and property value matches the filter. number Optional [ NumberFilter ] The result of the formula is 'number' and property value matches the filter. date Optional [ DateFilter ] The result of the formula is 'date' and property value matches the filter.","title":"FormulaFilter"},{"location":"api_reference/properties/","text":"Properties \u00b6 Bases: Collection [ Props ] Holds the properties of a database/page. Source code in nopy/properties.py 18 19 20 21 22 23 24 25 26 27 28 29 def __init__ ( self , props : Optional [ Iterable [ Props ]] = None ): # The property names mapped to the corresponding property. self . _names : dict [ str , Props ] = {} # The property ids mapped to the corresponding property. self . _ids : dict [ str , Props ] = {} # Keeping this set makes handling __len__ and __iter__ easier. self . _props : Set [ Props ] = set () if props is not None : for prop in props : self . add ( prop ) add ( prop ) \u00b6 Adds the given property. Attributes: Name Type Description prop Props The property to add. Raises: Type Description ValueError Raised if property has neither name nor id. PropertyExistsError Raised if a property that already exists is tried to be added again. Source code in nopy/properties.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 def add ( self , prop : Props ): \"\"\"Adds the given property. Attributes: prop (Props): The property to add. Raises: ValueError: Raised if property has neither name nor id. PropertyExistsError: Raised if a property that already exists is tried to be added again. \"\"\" if not prop . name and not prop . id : raise ValueError ( \"either id or name must be provided\" ) if prop . name in self . _names or prop . id in self . _ids or prop in self . _props : raise PropertyExistsError ( \"'prop' already exists\" ) if prop . name : self . _names [ prop . name ] = prop if prop . id : self . _ids [ prop . id ] = prop self . _props . add ( prop ) get ( prop_identifier ) \u00b6 Gets the property based on the given identifier. Attributes: Name Type Description prop_identifier str The name or the id of the property. Raises: Type Description KeyError Raised if the property isn't found. Source code in nopy/properties.py 54 55 56 57 58 59 60 61 62 63 64 def get ( self , prop_identifier : str ) -> Props : \"\"\"Gets the property based on the given identifier. Attributes: prop_identifier (str): The name or the id of the property. Raises: KeyError: Raised if the property isn't found. \"\"\" return self . __getitem__ ( prop_identifier ) pop ( prop ) \u00b6 Deletes the property. Attributes: Name Type Description prop Union [ str , Props ] The property to be deleted or it's id or name. Raises: Type Description KeyError Raised if the property isn't found. Source code in nopy/properties.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 def pop ( self , prop : Union [ str , Props ]) -> Props : \"\"\"Deletes the property. Attributes: prop (Union[str, Props]): The property to be deleted or it's id or name. Raises: KeyError: Raised if the property isn't found. \"\"\" try : if isinstance ( prop , str ): prop = self . __getitem__ ( prop ) self . _props . remove ( prop ) self . _names . pop ( prop . name , None ) self . _ids . pop ( prop . id , None ) return prop except ( KeyError , PropertyNotFoundError ): msg = f \"' { prop } ' not found\" raise PropertyNotFoundError ( msg )","title":"Properties"},{"location":"api_reference/properties/#properties","text":"Bases: Collection [ Props ] Holds the properties of a database/page. Source code in nopy/properties.py 18 19 20 21 22 23 24 25 26 27 28 29 def __init__ ( self , props : Optional [ Iterable [ Props ]] = None ): # The property names mapped to the corresponding property. self . _names : dict [ str , Props ] = {} # The property ids mapped to the corresponding property. self . _ids : dict [ str , Props ] = {} # Keeping this set makes handling __len__ and __iter__ easier. self . _props : Set [ Props ] = set () if props is not None : for prop in props : self . add ( prop )","title":"Properties"},{"location":"api_reference/properties/#nopy.properties.Properties.add","text":"Adds the given property. Attributes: Name Type Description prop Props The property to add. Raises: Type Description ValueError Raised if property has neither name nor id. PropertyExistsError Raised if a property that already exists is tried to be added again. Source code in nopy/properties.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 def add ( self , prop : Props ): \"\"\"Adds the given property. Attributes: prop (Props): The property to add. Raises: ValueError: Raised if property has neither name nor id. PropertyExistsError: Raised if a property that already exists is tried to be added again. \"\"\" if not prop . name and not prop . id : raise ValueError ( \"either id or name must be provided\" ) if prop . name in self . _names or prop . id in self . _ids or prop in self . _props : raise PropertyExistsError ( \"'prop' already exists\" ) if prop . name : self . _names [ prop . name ] = prop if prop . id : self . _ids [ prop . id ] = prop self . _props . add ( prop )","title":"add()"},{"location":"api_reference/properties/#nopy.properties.Properties.get","text":"Gets the property based on the given identifier. Attributes: Name Type Description prop_identifier str The name or the id of the property. Raises: Type Description KeyError Raised if the property isn't found. Source code in nopy/properties.py 54 55 56 57 58 59 60 61 62 63 64 def get ( self , prop_identifier : str ) -> Props : \"\"\"Gets the property based on the given identifier. Attributes: prop_identifier (str): The name or the id of the property. Raises: KeyError: Raised if the property isn't found. \"\"\" return self . __getitem__ ( prop_identifier )","title":"get()"},{"location":"api_reference/properties/#nopy.properties.Properties.pop","text":"Deletes the property. Attributes: Name Type Description prop Union [ str , Props ] The property to be deleted or it's id or name. Raises: Type Description KeyError Raised if the property isn't found. Source code in nopy/properties.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 def pop ( self , prop : Union [ str , Props ]) -> Props : \"\"\"Deletes the property. Attributes: prop (Union[str, Props]): The property to be deleted or it's id or name. Raises: KeyError: Raised if the property isn't found. \"\"\" try : if isinstance ( prop , str ): prop = self . __getitem__ ( prop ) self . _props . remove ( prop ) self . _names . pop ( prop . name , None ) self . _ids . pop ( prop . id , None ) return prop except ( KeyError , PropertyNotFoundError ): msg = f \"' { prop } ' not found\" raise PropertyNotFoundError ( msg )","title":"pop()"},{"location":"api_reference/query/","text":"Query \u00b6 Info The official Notion API docs for querying databases can be found here . Query dataclass \u00b6 A representation of a query to the Notion API. Attributes: Name Type Description and_filters list [ Filter ] The filters which are chained by \"and\". or_filters list [ Filter ] The filters which are chained by \"or\". sorts list [ Union [ TimestampSort , PropertySort ]] The sorts to be applied to the results. Filter dataclass \u00b6 A filter object. Attributes: Name Type Description prop Union [ DBProps , str ] The property or the id of the property to filter. filter Union [ PropFilter , dict [ str , Any ]] The filter to apply on the property. TextFilter dataclass \u00b6 Bases: PropFilter A filter for text properties. Attributes: Name Type Description equals Optional [ str ] Property value is an exact match. does_not_equal Optional [ str ] Property value does not match exactly. contains Optional [ str ] Property value contains the string. does_not_contain Optional [ str ] Property value does not contain the string. starts_with Optional [ str ] Property value start with the string. ends_with Optional [ str ] Property value ends with the string. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty. NumberFilter dataclass \u00b6 Bases: PropFilter A filter for number properties. Attributes: Name Type Description equals Optional [ Number ] Property value is an exact match. does_not_equal Optional [ Number ] Property value is not an exact match. greater_than Optional [ Number ] Property value is greater than the number. less_than Optional [ Number ] Property value is less than the number. greater_than_or_equal_to Optional [ Number ] Property value is greater than or equal to the number. less_than_or_equal_to Optional [ Number ] Property value is less than or equal to the the number. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty. CheckboxFilter dataclass \u00b6 Bases: PropFilter A filter for checkbox properties. Attributes: Name Type Description equals Optional [ bool ] Property value matches the boolean. does_not_equal Optional [ bool ] Property value does not match the boolean. SelectFilter dataclass \u00b6 Bases: PropFilter A filter for a select property. Attributes: Name Type Description equals Optional [ str ] Property value matches the string. does_not_equal Optional [ str ] Property value does not match the string. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty. MultiSelectFilter dataclass \u00b6 Bases: PropFilter A filter for a multi select property. Attributes: Name Type Description contains Optional [ str ] Property value contains the string. does_not_contains Optional [ str ] Property value does not contain the string. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty. StatusFilter dataclass \u00b6 Bases: PropFilter A filter for a status property. Attributes: Name Type Description equals Optional [ str ] Property value matches the string. does_not_equal Optional [ str ] Property value does not match the string. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty. DateFilter dataclass \u00b6 Bases: PropFilter A filter for date properties. Attributes: Name Type Description equals Optional [ datetime ] The property value equals the date. before Optional [ datetime ] The property value is before the date. after Optional [ datetime ] The property value is after the date. on_or_before Optional [ datetime ] The property value is on or before the date. on_or_after Optional [ datetime ] The property value is on or after the date. past_week Optional [ Literal [True]] The property value is within the past week. past_month Optional [ Literal [True]] The property value is within the past month. past_year Optional [ Literal [True]] The property value is within the past year. this_week Optional [ Literal [True]] The property value is within this week. next_week Optional [ Literal [True]] The property value is within next week. next_month Optional [ Literal [True]] The property value is within next month. next_year Optional [ Literal [True]] The property value is within next year. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty. FilesFilter dataclass \u00b6 Bases: PropFilter A filter for files properties. Attributes: Name Type Description is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty. FormulaFilter dataclass \u00b6 Bases: PropFilter A filter for formula properties. Attributes: Name Type Description string Optional [ TextFilter ] The result of formula is 'string' and property value matches the filter. checkbox Optional [ CheckboxFilter ] The result of the formula is 'checkbox' and property value matches the filter. number Optional [ NumberFilter ] The result of the formula is 'number' and property value matches the filter. date Optional [ DateFilter ] The result of the formula is 'date' and property value matches the filter. PropertySort dataclass \u00b6 A property based sort. Attributes: Name Type Description prop Union [ DBProps , str ] The property or the property id to sort with. direction Literal ['ascending', 'descending'] The direction to sort in. TimestampSort dataclass \u00b6 A timestamp based sort. Attributes: Name Type Description timestamp Literal ['created_time', 'last_edited_time'] The timestamp to sort by. direction Literal ['ascending', 'descending'] The direction to sort in.","title":"Queries"},{"location":"api_reference/query/#query","text":"Info The official Notion API docs for querying databases can be found here .","title":"Query"},{"location":"api_reference/query/#nopy.query.Query","text":"A representation of a query to the Notion API. Attributes: Name Type Description and_filters list [ Filter ] The filters which are chained by \"and\". or_filters list [ Filter ] The filters which are chained by \"or\". sorts list [ Union [ TimestampSort , PropertySort ]] The sorts to be applied to the results.","title":"Query"},{"location":"api_reference/query/#nopy.filters.Filter","text":"A filter object. Attributes: Name Type Description prop Union [ DBProps , str ] The property or the id of the property to filter. filter Union [ PropFilter , dict [ str , Any ]] The filter to apply on the property.","title":"Filter"},{"location":"api_reference/query/#nopy.filters.TextFilter","text":"Bases: PropFilter A filter for text properties. Attributes: Name Type Description equals Optional [ str ] Property value is an exact match. does_not_equal Optional [ str ] Property value does not match exactly. contains Optional [ str ] Property value contains the string. does_not_contain Optional [ str ] Property value does not contain the string. starts_with Optional [ str ] Property value start with the string. ends_with Optional [ str ] Property value ends with the string. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty.","title":"TextFilter"},{"location":"api_reference/query/#nopy.filters.NumberFilter","text":"Bases: PropFilter A filter for number properties. Attributes: Name Type Description equals Optional [ Number ] Property value is an exact match. does_not_equal Optional [ Number ] Property value is not an exact match. greater_than Optional [ Number ] Property value is greater than the number. less_than Optional [ Number ] Property value is less than the number. greater_than_or_equal_to Optional [ Number ] Property value is greater than or equal to the number. less_than_or_equal_to Optional [ Number ] Property value is less than or equal to the the number. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty.","title":"NumberFilter"},{"location":"api_reference/query/#nopy.filters.CheckboxFilter","text":"Bases: PropFilter A filter for checkbox properties. Attributes: Name Type Description equals Optional [ bool ] Property value matches the boolean. does_not_equal Optional [ bool ] Property value does not match the boolean.","title":"CheckboxFilter"},{"location":"api_reference/query/#nopy.filters.SelectFilter","text":"Bases: PropFilter A filter for a select property. Attributes: Name Type Description equals Optional [ str ] Property value matches the string. does_not_equal Optional [ str ] Property value does not match the string. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty.","title":"SelectFilter"},{"location":"api_reference/query/#nopy.filters.MultiSelectFilter","text":"Bases: PropFilter A filter for a multi select property. Attributes: Name Type Description contains Optional [ str ] Property value contains the string. does_not_contains Optional [ str ] Property value does not contain the string. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty.","title":"MultiSelectFilter"},{"location":"api_reference/query/#nopy.filters.StatusFilter","text":"Bases: PropFilter A filter for a status property. Attributes: Name Type Description equals Optional [ str ] Property value matches the string. does_not_equal Optional [ str ] Property value does not match the string. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty.","title":"StatusFilter"},{"location":"api_reference/query/#nopy.filters.DateFilter","text":"Bases: PropFilter A filter for date properties. Attributes: Name Type Description equals Optional [ datetime ] The property value equals the date. before Optional [ datetime ] The property value is before the date. after Optional [ datetime ] The property value is after the date. on_or_before Optional [ datetime ] The property value is on or before the date. on_or_after Optional [ datetime ] The property value is on or after the date. past_week Optional [ Literal [True]] The property value is within the past week. past_month Optional [ Literal [True]] The property value is within the past month. past_year Optional [ Literal [True]] The property value is within the past year. this_week Optional [ Literal [True]] The property value is within this week. next_week Optional [ Literal [True]] The property value is within next week. next_month Optional [ Literal [True]] The property value is within next month. next_year Optional [ Literal [True]] The property value is within next year. is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty.","title":"DateFilter"},{"location":"api_reference/query/#nopy.filters.FilesFilter","text":"Bases: PropFilter A filter for files properties. Attributes: Name Type Description is_empty Optional [ Literal [True]] Property value is empty. is_not_empty Optional [ Literal [True]] Property value is not empty.","title":"FilesFilter"},{"location":"api_reference/query/#nopy.filters.FormulaFilter","text":"Bases: PropFilter A filter for formula properties. Attributes: Name Type Description string Optional [ TextFilter ] The result of formula is 'string' and property value matches the filter. checkbox Optional [ CheckboxFilter ] The result of the formula is 'checkbox' and property value matches the filter. number Optional [ NumberFilter ] The result of the formula is 'number' and property value matches the filter. date Optional [ DateFilter ] The result of the formula is 'date' and property value matches the filter.","title":"FormulaFilter"},{"location":"api_reference/query/#nopy.sorts.PropertySort","text":"A property based sort. Attributes: Name Type Description prop Union [ DBProps , str ] The property or the property id to sort with. direction Literal ['ascending', 'descending'] The direction to sort in.","title":"PropertySort"},{"location":"api_reference/query/#nopy.sorts.TimestampSort","text":"A timestamp based sort. Attributes: Name Type Description timestamp Literal ['created_time', 'last_edited_time'] The timestamp to sort by. direction Literal ['ascending', 'descending'] The direction to sort in.","title":"TimestampSort"},{"location":"api_reference/sorts/","text":"Sorts \u00b6 Info The official Notion API docs for sorts can be found here . PropertySort dataclass \u00b6 A property based sort. Attributes: Name Type Description prop Union [ DBProps , str ] The property or the property id to sort with. direction Literal ['ascending', 'descending'] The direction to sort in. TimestampSort dataclass \u00b6 A timestamp based sort. Attributes: Name Type Description timestamp Literal ['created_time', 'last_edited_time'] The timestamp to sort by. direction Literal ['ascending', 'descending'] The direction to sort in.","title":"Sorts"},{"location":"api_reference/sorts/#sorts","text":"Info The official Notion API docs for sorts can be found here .","title":"Sorts"},{"location":"api_reference/sorts/#nopy.sorts.PropertySort","text":"A property based sort. Attributes: Name Type Description prop Union [ DBProps , str ] The property or the property id to sort with. direction Literal ['ascending', 'descending'] The direction to sort in.","title":"PropertySort"},{"location":"api_reference/sorts/#nopy.sorts.TimestampSort","text":"A timestamp based sort. Attributes: Name Type Description timestamp Literal ['created_time', 'last_edited_time'] The timestamp to sort by. direction Literal ['ascending', 'descending'] The direction to sort in.","title":"TimestampSort"},{"location":"api_reference/notion_objects/database/","text":"Database \u00b6 Info The official Notion API docs for databases can be found here . Bases: NotionObject A representation of a database in Notion. Attributes: Name Type Description title str The title of the datbase without styling. rich_title list [ RichText ] The title of the database with style information. description str The description of the database without styling. rich_description list [ RichText ] The description of the database with sytle information. properties Properties The properties of the database. icon Optional [ Union [ File , Emoji ]] The icon of the database, if any. cover Optional [ File ] The cover of the database, if any. is_inline bool Denotes whether the database is inline or not. url str The URL of the database, if any. archived bool Denotes whether the database is archived or not. id str The id of the database. parent Parent The parent of the database. created_time Optional [ datetime ] The time the database was created. last_edited_time Optional [ datetime ] The time the database was last edited. type ObjectTypes The type of the Notion object which will always be ObjectTypes.DATABASE . get_pages ( max_pages = 0 , page_size = 100 ) \u00b6 Returns a generator that yields a single page at a time. Parameters: Name Type Description Default max_pages int The maximum number of pages to return. 0 page_size int The number of pages to get from the Notion API per API call. 100 Returns: Type Description Generator [ Page , None, None] A generator that yields a single page at a time. Source code in objects/database.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 def get_pages ( self , max_pages : int = 0 , page_size : int = 100 ) -> Generator [ Page , None , None ]: \"\"\"Returns a generator that yields a single page at a time. Args: max_pages: The maximum number of pages to return. page_size: The number of pages to get from the Notion API per API call. Returns: A generator that yields a single page at a time. \"\"\" if not self . _client : raise NoClientFoundError ( \"database\" ) return paginate ( self . _client . _query_db_raw , # type: ignore Page . from_dict , page_size = page_size , max_pages = max_pages , db_id = self . id , client = self . _client , ) create_page ( page ) \u00b6 Creates a page within this database. Attributes: Name Type Description page Union [ Page , dict [ str , Any ]] The page to be created. Returns: Type Description Page The instance of the created Page . Source code in objects/database.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 def create_page ( self , page : Union [ \"Page\" , dict [ str , Any ]]) -> \"Page\" : \"\"\"Creates a page within this database. Attributes: page (Union[Page, dict[str, Any]]): The page to be created. Returns: The instance of the created `Page`. \"\"\" if not self . _client : raise NoClientFoundError ( \"no client found\" ) if not isinstance ( page , dict ): page = page . serialize () page [ \"parent\" ] = DatabaseParent ( self . id ) . serialize () return self . _client . create_page ( page ) update ( in_place = False ) \u00b6 Updates the database. Attributes: Name Type Description in_place bool If True , then this instance is updated in place. Returns: Type Description Database The updated Database instance. Returns self if in_place is Database True . Source code in objects/database.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 def update ( self , in_place : bool = False ) -> Database : \"\"\"Updates the database. Attributes: in_place (bool): If `True`, then this instance is updated in place. Returns: The updated Database instance. Returns `self` if `in_place` is `True`. \"\"\" if not self . _client : raise NoClientFoundError ( \"no client is associated with this instance\" ) db = self . serialize () # Parent should not be present when updating db . pop ( \"parent\" ) updated_db = self . _client . update_db ( self . id , db ) # Deleted properties have to be sent as a different update # request. Sending the deleted properties in one request does NOT # work. deleted_props = self . _find_deleted_props () if deleted_props : db [ \"properties\" ] = { prop_id : None for prop_id in deleted_props } updated_db = self . _client . update_db ( self . id , db ) if not in_place : return updated_db self . __dict__ . clear () self . __dict__ = updated_db . __dict__ return self query ( query , max_pages = 0 ) \u00b6 Query a database. Attributes: Name Type Description query The query to apply on the database. Returns: Type Description Generator [ Page , None, None] A generator that yields a single page at a time. Source code in objects/database.py 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 def query ( self , query : Union [ Query , dict [ str , Any ]], max_pages : int = 0 ) -> Generator [ \"Page\" , None , None ]: \"\"\"Query a database. Attributes: query: The query to apply on the database. Returns: A generator that yields a single page at a time. \"\"\" if not self . _client : raise NoClientFoundError ( \"database\" ) if isinstance ( query , Query ): query = query . serialize () return paginate ( self . _client . _query_db_raw , # type: ignore Page . from_dict , max_pages = max_pages , db_id = self . id , client = self . _client , query = query , )","title":"Database"},{"location":"api_reference/notion_objects/database/#database","text":"Info The official Notion API docs for databases can be found here . Bases: NotionObject A representation of a database in Notion. Attributes: Name Type Description title str The title of the datbase without styling. rich_title list [ RichText ] The title of the database with style information. description str The description of the database without styling. rich_description list [ RichText ] The description of the database with sytle information. properties Properties The properties of the database. icon Optional [ Union [ File , Emoji ]] The icon of the database, if any. cover Optional [ File ] The cover of the database, if any. is_inline bool Denotes whether the database is inline or not. url str The URL of the database, if any. archived bool Denotes whether the database is archived or not. id str The id of the database. parent Parent The parent of the database. created_time Optional [ datetime ] The time the database was created. last_edited_time Optional [ datetime ] The time the database was last edited. type ObjectTypes The type of the Notion object which will always be ObjectTypes.DATABASE .","title":"Database"},{"location":"api_reference/notion_objects/database/#objects.database.Database.get_pages","text":"Returns a generator that yields a single page at a time. Parameters: Name Type Description Default max_pages int The maximum number of pages to return. 0 page_size int The number of pages to get from the Notion API per API call. 100 Returns: Type Description Generator [ Page , None, None] A generator that yields a single page at a time. Source code in objects/database.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 def get_pages ( self , max_pages : int = 0 , page_size : int = 100 ) -> Generator [ Page , None , None ]: \"\"\"Returns a generator that yields a single page at a time. Args: max_pages: The maximum number of pages to return. page_size: The number of pages to get from the Notion API per API call. Returns: A generator that yields a single page at a time. \"\"\" if not self . _client : raise NoClientFoundError ( \"database\" ) return paginate ( self . _client . _query_db_raw , # type: ignore Page . from_dict , page_size = page_size , max_pages = max_pages , db_id = self . id , client = self . _client , )","title":"get_pages()"},{"location":"api_reference/notion_objects/database/#objects.database.Database.create_page","text":"Creates a page within this database. Attributes: Name Type Description page Union [ Page , dict [ str , Any ]] The page to be created. Returns: Type Description Page The instance of the created Page . Source code in objects/database.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 def create_page ( self , page : Union [ \"Page\" , dict [ str , Any ]]) -> \"Page\" : \"\"\"Creates a page within this database. Attributes: page (Union[Page, dict[str, Any]]): The page to be created. Returns: The instance of the created `Page`. \"\"\" if not self . _client : raise NoClientFoundError ( \"no client found\" ) if not isinstance ( page , dict ): page = page . serialize () page [ \"parent\" ] = DatabaseParent ( self . id ) . serialize () return self . _client . create_page ( page )","title":"create_page()"},{"location":"api_reference/notion_objects/database/#objects.database.Database.update","text":"Updates the database. Attributes: Name Type Description in_place bool If True , then this instance is updated in place. Returns: Type Description Database The updated Database instance. Returns self if in_place is Database True . Source code in objects/database.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 def update ( self , in_place : bool = False ) -> Database : \"\"\"Updates the database. Attributes: in_place (bool): If `True`, then this instance is updated in place. Returns: The updated Database instance. Returns `self` if `in_place` is `True`. \"\"\" if not self . _client : raise NoClientFoundError ( \"no client is associated with this instance\" ) db = self . serialize () # Parent should not be present when updating db . pop ( \"parent\" ) updated_db = self . _client . update_db ( self . id , db ) # Deleted properties have to be sent as a different update # request. Sending the deleted properties in one request does NOT # work. deleted_props = self . _find_deleted_props () if deleted_props : db [ \"properties\" ] = { prop_id : None for prop_id in deleted_props } updated_db = self . _client . update_db ( self . id , db ) if not in_place : return updated_db self . __dict__ . clear () self . __dict__ = updated_db . __dict__ return self","title":"update()"},{"location":"api_reference/notion_objects/database/#objects.database.Database.query","text":"Query a database. Attributes: Name Type Description query The query to apply on the database. Returns: Type Description Generator [ Page , None, None] A generator that yields a single page at a time. Source code in objects/database.py 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 def query ( self , query : Union [ Query , dict [ str , Any ]], max_pages : int = 0 ) -> Generator [ \"Page\" , None , None ]: \"\"\"Query a database. Attributes: query: The query to apply on the database. Returns: A generator that yields a single page at a time. \"\"\" if not self . _client : raise NoClientFoundError ( \"database\" ) if isinstance ( query , Query ): query = query . serialize () return paginate ( self . _client . _query_db_raw , # type: ignore Page . from_dict , max_pages = max_pages , db_id = self . id , client = self . _client , query = query , )","title":"query()"},{"location":"api_reference/notion_objects/page/","text":"Page \u00b6 Info The official Notion API docs for pages can be found here . Bases: NotionObject A representation of a page in Notion. Attributes: Name Type Description title str The title of the datbase without styling. rich_title list [ RichText ] The title of the page with style information. properties Properties The properties of the page. icon Optional [ Union [ File , Emoji ]] The icon of the page, if any. cover Optional [ File ] The cover of the page, if any. url str The URL of the page, if any. archived bool Denotes whether the page is archived or not. id str The id of the page. parent Parent The parent of the page. created_time Optional [ datetime ] The time the page was created. last_edited_time Optional [ datetime ] The time the page was last edited. type ObjectTypes The type of the Notion object which will always be ObjectTypes.PAGE . update ( in_place = False ) \u00b6 Updates the page. Attributes: Name Type Description in_place bool If True , then this instance is updated in place. Returns: Type Description Page The updated Page instance. Returns self if in_place is True . Source code in objects/page.py 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 def update ( self , in_place : bool = False ) -> Page : \"\"\"Updates the page. Attributes: in_place (bool): If `True`, then this instance is updated in place. Returns: The updated Page instance. Returns `self` if `in_place` is `True`. \"\"\" if not self . _client : raise NoClientFoundError ( \"no client is associated with this instance\" ) page = self . serialize () # Parent should not be present when updating page . pop ( \"parent\" ) updated_page = self . _client . update_page ( self . id , page ) if not in_place : return updated_page self . __dict__ . clear () self . __dict__ = updated_page . __dict__ return self","title":"Page"},{"location":"api_reference/notion_objects/page/#page","text":"Info The official Notion API docs for pages can be found here . Bases: NotionObject A representation of a page in Notion. Attributes: Name Type Description title str The title of the datbase without styling. rich_title list [ RichText ] The title of the page with style information. properties Properties The properties of the page. icon Optional [ Union [ File , Emoji ]] The icon of the page, if any. cover Optional [ File ] The cover of the page, if any. url str The URL of the page, if any. archived bool Denotes whether the page is archived or not. id str The id of the page. parent Parent The parent of the page. created_time Optional [ datetime ] The time the page was created. last_edited_time Optional [ datetime ] The time the page was last edited. type ObjectTypes The type of the Notion object which will always be ObjectTypes.PAGE .","title":"Page"},{"location":"api_reference/notion_objects/page/#objects.page.Page.update","text":"Updates the page. Attributes: Name Type Description in_place bool If True , then this instance is updated in place. Returns: Type Description Page The updated Page instance. Returns self if in_place is True . Source code in objects/page.py 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 def update ( self , in_place : bool = False ) -> Page : \"\"\"Updates the page. Attributes: in_place (bool): If `True`, then this instance is updated in place. Returns: The updated Page instance. Returns `self` if `in_place` is `True`. \"\"\" if not self . _client : raise NoClientFoundError ( \"no client is associated with this instance\" ) page = self . serialize () # Parent should not be present when updating page . pop ( \"parent\" ) updated_page = self . _client . update_page ( self . id , page ) if not in_place : return updated_page self . __dict__ . clear () self . __dict__ = updated_page . __dict__ return self","title":"update()"},{"location":"api_reference/properties/base/","text":"Base Properties \u00b6 BaseProperty \u00b6 The base class from which all properties inherit. from_dict ( args ) classmethod \u00b6 Creates an instance of the object from the given dictionary. The dictionary MUST follow the format given by Notion. Source code in props/base.py 20 21 22 23 24 25 26 @classmethod def from_dict ( cls : Type [ BaseProperty ], args : dict [ str , Any ]) -> BaseProperty : \"\"\"Creates an instance of the object from the given dictionary. The dictionary MUST follow the format given by Notion. \"\"\" raise NotImplementedError ( \"to be implemented by subclass\" ) ObjectProperty dataclass \u00b6 Bases: BaseProperty The base class from which all properties directly available on databases and pages inherit.","title":"Base Properties"},{"location":"api_reference/properties/base/#base-properties","text":"","title":"Base Properties"},{"location":"api_reference/properties/base/#props.base.BaseProperty","text":"The base class from which all properties inherit.","title":"BaseProperty"},{"location":"api_reference/properties/base/#props.base.BaseProperty.from_dict","text":"Creates an instance of the object from the given dictionary. The dictionary MUST follow the format given by Notion. Source code in props/base.py 20 21 22 23 24 25 26 @classmethod def from_dict ( cls : Type [ BaseProperty ], args : dict [ str , Any ]) -> BaseProperty : \"\"\"Creates an instance of the object from the given dictionary. The dictionary MUST follow the format given by Notion. \"\"\" raise NotImplementedError ( \"to be implemented by subclass\" )","title":"from_dict()"},{"location":"api_reference/properties/base/#props.base.ObjectProperty","text":"Bases: BaseProperty The base class from which all properties directly available on databases and pages inherit.","title":"ObjectProperty"},{"location":"api_reference/properties/common/","text":"Common Properties \u00b6 Info The official Notion API docs for common properties can be found here . A few of these are not classified as \"common\" by Notion. These are: Annotations, Date, Link, Option, StatusGroup. The docs for these can be found within the database and page properties documentation. Annotations dataclass \u00b6 Bases: BaseProperty A representation of the annotations. Attributes: Name Type Description bold bool Mark the text as bold. italic bool Make the text italic. strikethrough bool Strikethrough the text. underline bool Underline the text. code bool Mark the text as code. color Colors Change the color of the code. Date dataclass \u00b6 Bases: BaseProperty A representation of a date in Notion. Attributes: Name Type Description start datetime The start date and time. end Optional [ datetime ] The end date and time, if any. time_zone Optional [ ZoneInfo ] The time zone, if any. Link dataclass \u00b6 Bases: BaseProperty A representation of a link object. Attributes: Name Type Description url str The URL. RichText dataclass \u00b6 Bases: BaseProperty A represenation of a rich text property. Attributes: Name Type Description plain_text str The plain text without any annotations/styling. href str The URL to the link, if any. annotations Annotations The annotations/styles applied on this text. type RichTextTypes The type of rich text which will always be RichText.UNSUPPORTED . Text dataclass \u00b6 Bases: RichText A represenation of a text type of rich text. Attributes: Name Type Description plain_text str The plain text without any annotations/styling. href str The URL to the link, if any. annotations Annotations The annotations/styles applied on this text. link Optional [ Link ] The link within the text, if any. type RichTextTypes The type of rich text which will always be RichText.UNSUPPORTED . Mention dataclass \u00b6 Bases: RichText A represenation of a mention type of rich text. Attributes: Name Type Description plain_text str The plain text without any annotations/styling. mention_type MentionTypes The type of the mention. Available attributes depend on this type. id str The id of the mention, if any. user Optional [ User ] The mention user, if any. date Optional [ Date ] The date mentioned, if any. url Optional [ str ] The URL mentioned, if any. href str The URL to the link, if any. annotations Annotations The annotations/styles applied on this text. type RichTextTypes The type of rich text which will always be RichText.UNSUPPORTED . Equation dataclass \u00b6 Bases: RichText A represenation of an equation type of rich text. Attributes: Name Type Description plain_text str The plain text without any annotations/styling. expression str The mathematical expression as a LaTeX string. href str The URL to the link, if any. annotations Annotations The annotations/styles applied on this text. type RichTextTypes The type of rich text which will always be RichText.UNSUPPORTED . File dataclass \u00b6 Bases: BaseProperty A representation of a File object. Attributes: Name Type Description url str The url of the file. type FileTypes The 'type' of file. expiry_time Optional [ datetime ] The date on which the file will expire from Notion. NOTE: Only files hosted by Notion will have an expiry_time . That is, the type should be FileType.FILE . Option dataclass \u00b6 Bases: BaseProperty A representation of an Option. This can be used in the options for Select and Multi-Select properties. Attributes: Name Type Description name str Name of the option. id str Id of the option. color Colors The color associated with the option. StatusGroup dataclass \u00b6 Bases: BaseProperty A representation of a Status Group. Attributes: Name Type Description name str Name of the group. id str Id of the group. color Colors Color associated with the group. option_ids list [ str ] The list of option ids associated with the group. Emoji dataclass \u00b6 Bases: BaseProperty A representation of the Emoji object. Attributes: Name Type Description emoji str The emoji as a Unicode string. Parent dataclass \u00b6 Bases: BaseProperty A representation of a parent of a Notion object. The base parent class from which all parent objects inherit. Attributes: Name Type Description id str The id of the parent. type ParentTypes The type of the parent which will always be ParentTypes.UNSUPPORTED . DatabaseParent dataclass \u00b6 Bases: Parent A representation of a database parent of a Notion object. Attributes: Name Type Description id str The id of the database. type ParentTypes The type of the parent which will always be ParentTypes.DATABASE . PageParent dataclass \u00b6 Bases: Parent A representation of a page parent of a Notion object. Attributes: Name Type Description id str The id of the page. type ParentTypes The type of the parent which will always be ParentTypes.PAGE . WorkspaceParent dataclass \u00b6 Bases: Parent A representation of a workspace parent of a Notion object. Attributes: Name Type Description id str The id of the workspace. type ParentType The type of the parent which will always be ParentTypes.WORKSPACE . BlockParent dataclass \u00b6 Bases: Parent A representation of a block parent of a Notion object. Attributes: Name Type Description id str The id of the block. type ParentTypes The type of the parent which will always be ParentTypes.BLOCK .","title":"Common Properties"},{"location":"api_reference/properties/common/#common-properties","text":"Info The official Notion API docs for common properties can be found here . A few of these are not classified as \"common\" by Notion. These are: Annotations, Date, Link, Option, StatusGroup. The docs for these can be found within the database and page properties documentation.","title":"Common Properties"},{"location":"api_reference/properties/common/#props.common.Annotations","text":"Bases: BaseProperty A representation of the annotations. Attributes: Name Type Description bold bool Mark the text as bold. italic bool Make the text italic. strikethrough bool Strikethrough the text. underline bool Underline the text. code bool Mark the text as code. color Colors Change the color of the code.","title":"Annotations"},{"location":"api_reference/properties/common/#props.common.Date","text":"Bases: BaseProperty A representation of a date in Notion. Attributes: Name Type Description start datetime The start date and time. end Optional [ datetime ] The end date and time, if any. time_zone Optional [ ZoneInfo ] The time zone, if any.","title":"Date"},{"location":"api_reference/properties/common/#props.common.Link","text":"Bases: BaseProperty A representation of a link object. Attributes: Name Type Description url str The URL.","title":"Link"},{"location":"api_reference/properties/common/#props.common.RichText","text":"Bases: BaseProperty A represenation of a rich text property. Attributes: Name Type Description plain_text str The plain text without any annotations/styling. href str The URL to the link, if any. annotations Annotations The annotations/styles applied on this text. type RichTextTypes The type of rich text which will always be RichText.UNSUPPORTED .","title":"RichText"},{"location":"api_reference/properties/common/#props.common.Text","text":"Bases: RichText A represenation of a text type of rich text. Attributes: Name Type Description plain_text str The plain text without any annotations/styling. href str The URL to the link, if any. annotations Annotations The annotations/styles applied on this text. link Optional [ Link ] The link within the text, if any. type RichTextTypes The type of rich text which will always be RichText.UNSUPPORTED .","title":"Text"},{"location":"api_reference/properties/common/#props.common.Mention","text":"Bases: RichText A represenation of a mention type of rich text. Attributes: Name Type Description plain_text str The plain text without any annotations/styling. mention_type MentionTypes The type of the mention. Available attributes depend on this type. id str The id of the mention, if any. user Optional [ User ] The mention user, if any. date Optional [ Date ] The date mentioned, if any. url Optional [ str ] The URL mentioned, if any. href str The URL to the link, if any. annotations Annotations The annotations/styles applied on this text. type RichTextTypes The type of rich text which will always be RichText.UNSUPPORTED .","title":"Mention"},{"location":"api_reference/properties/common/#props.common.Equation","text":"Bases: RichText A represenation of an equation type of rich text. Attributes: Name Type Description plain_text str The plain text without any annotations/styling. expression str The mathematical expression as a LaTeX string. href str The URL to the link, if any. annotations Annotations The annotations/styles applied on this text. type RichTextTypes The type of rich text which will always be RichText.UNSUPPORTED .","title":"Equation"},{"location":"api_reference/properties/common/#props.common.File","text":"Bases: BaseProperty A representation of a File object. Attributes: Name Type Description url str The url of the file. type FileTypes The 'type' of file. expiry_time Optional [ datetime ] The date on which the file will expire from Notion. NOTE: Only files hosted by Notion will have an expiry_time . That is, the type should be FileType.FILE .","title":"File"},{"location":"api_reference/properties/common/#props.common.Option","text":"Bases: BaseProperty A representation of an Option. This can be used in the options for Select and Multi-Select properties. Attributes: Name Type Description name str Name of the option. id str Id of the option. color Colors The color associated with the option.","title":"Option"},{"location":"api_reference/properties/common/#props.common.StatusGroup","text":"Bases: BaseProperty A representation of a Status Group. Attributes: Name Type Description name str Name of the group. id str Id of the group. color Colors Color associated with the group. option_ids list [ str ] The list of option ids associated with the group.","title":"StatusGroup"},{"location":"api_reference/properties/common/#props.common.Emoji","text":"Bases: BaseProperty A representation of the Emoji object. Attributes: Name Type Description emoji str The emoji as a Unicode string.","title":"Emoji"},{"location":"api_reference/properties/common/#props.common.Parent","text":"Bases: BaseProperty A representation of a parent of a Notion object. The base parent class from which all parent objects inherit. Attributes: Name Type Description id str The id of the parent. type ParentTypes The type of the parent which will always be ParentTypes.UNSUPPORTED .","title":"Parent"},{"location":"api_reference/properties/common/#props.common.DatabaseParent","text":"Bases: Parent A representation of a database parent of a Notion object. Attributes: Name Type Description id str The id of the database. type ParentTypes The type of the parent which will always be ParentTypes.DATABASE .","title":"DatabaseParent"},{"location":"api_reference/properties/common/#props.common.PageParent","text":"Bases: Parent A representation of a page parent of a Notion object. Attributes: Name Type Description id str The id of the page. type ParentTypes The type of the parent which will always be ParentTypes.PAGE .","title":"PageParent"},{"location":"api_reference/properties/common/#props.common.WorkspaceParent","text":"Bases: Parent A representation of a workspace parent of a Notion object. Attributes: Name Type Description id str The id of the workspace. type ParentType The type of the parent which will always be ParentTypes.WORKSPACE .","title":"WorkspaceParent"},{"location":"api_reference/properties/common/#props.common.BlockParent","text":"Bases: Parent A representation of a block parent of a Notion object. Attributes: Name Type Description id str The id of the block. type ParentTypes The type of the parent which will always be ParentTypes.BLOCK .","title":"BlockParent"},{"location":"api_reference/properties/db_props/","text":"Database Properties \u00b6 Info The official Notion API docs for database properties can be found here . All the database properties. DBCheckbox dataclass \u00b6 Bases: DBProp A representation of a checkbox property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.CHECKBOX . DBCreatedBy dataclass \u00b6 Bases: DBProp A representation of a created by property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.CREATED_BY . DBCreatedTime dataclass \u00b6 Bases: DBProp A representation of a created time property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.CREATED_TIME . DBDate dataclass \u00b6 Bases: DBProp A representation of a date property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.DATE . DBEmail dataclass \u00b6 Bases: DBProp A representation of a email property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.EMAIL . DBFiles dataclass \u00b6 Bases: DBProp A representation of a files property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.FILES . DBFormula dataclass \u00b6 Bases: DBProp A representation of a formula property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. expression str The expression used to evaluate the property. type PropTypes The type of the property which will always be PropTypes.FORMULA . DBLastEditedBy dataclass \u00b6 Bases: DBProp A representation of a last edited by property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.LAST_EDITED_BY . DBLastEditedTime dataclass \u00b6 Bases: DBProp A representation of a last edited time property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.LAST_EDITED_TIME . DBMultiSelect dataclass \u00b6 Bases: DBProp A representation of a multi select property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. options list [ Option ] The select options. type PropTypes The type of the property which will always be PropTypes.MULTI_SELECT . DBNumber dataclass \u00b6 Bases: DBProp A representation of a number property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.NUMBER . DBPeople dataclass \u00b6 Bases: DBProp A representation of a people property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.PEOPLE . DBPhoneNumber dataclass \u00b6 Bases: DBProp A representation of a phone number property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.PHONE_NUMBER . DBRelation dataclass \u00b6 Bases: DBProp A representation of a relation property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. database_id str The id of the database it's related to. relation_type Literal ['single_property', 'dual_property'] The relation type. synced_property_name Optional [ str ] The name of the property it's synced with. synced_property_id Optional [ str ] The id of the property it's synced with. type PropTypes The type of the property which will always be PropTypes.RELATION . DBRollup dataclass \u00b6 Bases: DBProp A representation of a rollup property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. relation_prop_name str The name of the relation property this property is responsible for rolling up. relation_id_name str The id of the relation property this property is responsible for rolling up. rollup_property_name str The name of the property of the pages in the related database. rollup_property_id str The id of the property of the pages in the related database. function RollupFunctions The function that's evaluated for every page in the relation of the rollup. type PropTypes The type of the property which will always be PropTypes.ROLLUP . DBSelect dataclass \u00b6 Bases: DBProp A representation of a select property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. options list [ Option ] The select options. type PropTypes The type of the property which will always be PropTypes.SELECT . DBStatus dataclass \u00b6 Bases: DBProp A representation of a status property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. options list [ Option ] The select options. groups list [ StatusGroup ] The available groups. type PropTypes The type of the property which will always be PropTypes.STATUS . DBText dataclass \u00b6 Bases: DBProp A representation of a 'Text' property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.RICH_TEXT . DBUrl dataclass \u00b6 Bases: DBProp A representation of a url property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.URL .","title":"Database Properties"},{"location":"api_reference/properties/db_props/#database-properties","text":"Info The official Notion API docs for database properties can be found here . All the database properties.","title":"Database Properties"},{"location":"api_reference/properties/db_props/#props.db_props.DBCheckbox","text":"Bases: DBProp A representation of a checkbox property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.CHECKBOX .","title":"DBCheckbox"},{"location":"api_reference/properties/db_props/#props.db_props.DBCreatedBy","text":"Bases: DBProp A representation of a created by property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.CREATED_BY .","title":"DBCreatedBy"},{"location":"api_reference/properties/db_props/#props.db_props.DBCreatedTime","text":"Bases: DBProp A representation of a created time property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.CREATED_TIME .","title":"DBCreatedTime"},{"location":"api_reference/properties/db_props/#props.db_props.DBDate","text":"Bases: DBProp A representation of a date property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.DATE .","title":"DBDate"},{"location":"api_reference/properties/db_props/#props.db_props.DBEmail","text":"Bases: DBProp A representation of a email property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.EMAIL .","title":"DBEmail"},{"location":"api_reference/properties/db_props/#props.db_props.DBFiles","text":"Bases: DBProp A representation of a files property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.FILES .","title":"DBFiles"},{"location":"api_reference/properties/db_props/#props.db_props.DBFormula","text":"Bases: DBProp A representation of a formula property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. expression str The expression used to evaluate the property. type PropTypes The type of the property which will always be PropTypes.FORMULA .","title":"DBFormula"},{"location":"api_reference/properties/db_props/#props.db_props.DBLastEditedBy","text":"Bases: DBProp A representation of a last edited by property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.LAST_EDITED_BY .","title":"DBLastEditedBy"},{"location":"api_reference/properties/db_props/#props.db_props.DBLastEditedTime","text":"Bases: DBProp A representation of a last edited time property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.LAST_EDITED_TIME .","title":"DBLastEditedTime"},{"location":"api_reference/properties/db_props/#props.db_props.DBMultiSelect","text":"Bases: DBProp A representation of a multi select property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. options list [ Option ] The select options. type PropTypes The type of the property which will always be PropTypes.MULTI_SELECT .","title":"DBMultiSelect"},{"location":"api_reference/properties/db_props/#props.db_props.DBNumber","text":"Bases: DBProp A representation of a number property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.NUMBER .","title":"DBNumber"},{"location":"api_reference/properties/db_props/#props.db_props.DBPeople","text":"Bases: DBProp A representation of a people property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.PEOPLE .","title":"DBPeople"},{"location":"api_reference/properties/db_props/#props.db_props.DBPhoneNumber","text":"Bases: DBProp A representation of a phone number property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.PHONE_NUMBER .","title":"DBPhoneNumber"},{"location":"api_reference/properties/db_props/#props.db_props.DBRelation","text":"Bases: DBProp A representation of a relation property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. database_id str The id of the database it's related to. relation_type Literal ['single_property', 'dual_property'] The relation type. synced_property_name Optional [ str ] The name of the property it's synced with. synced_property_id Optional [ str ] The id of the property it's synced with. type PropTypes The type of the property which will always be PropTypes.RELATION .","title":"DBRelation"},{"location":"api_reference/properties/db_props/#props.db_props.DBRollup","text":"Bases: DBProp A representation of a rollup property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. relation_prop_name str The name of the relation property this property is responsible for rolling up. relation_id_name str The id of the relation property this property is responsible for rolling up. rollup_property_name str The name of the property of the pages in the related database. rollup_property_id str The id of the property of the pages in the related database. function RollupFunctions The function that's evaluated for every page in the relation of the rollup. type PropTypes The type of the property which will always be PropTypes.ROLLUP .","title":"DBRollup"},{"location":"api_reference/properties/db_props/#props.db_props.DBSelect","text":"Bases: DBProp A representation of a select property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. options list [ Option ] The select options. type PropTypes The type of the property which will always be PropTypes.SELECT .","title":"DBSelect"},{"location":"api_reference/properties/db_props/#props.db_props.DBStatus","text":"Bases: DBProp A representation of a status property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. options list [ Option ] The select options. groups list [ StatusGroup ] The available groups. type PropTypes The type of the property which will always be PropTypes.STATUS .","title":"DBStatus"},{"location":"api_reference/properties/db_props/#props.db_props.DBText","text":"Bases: DBProp A representation of a 'Text' property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.RICH_TEXT .","title":"DBText"},{"location":"api_reference/properties/db_props/#props.db_props.DBUrl","text":"Bases: DBProp A representation of a url property on a database. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.URL .","title":"DBUrl"},{"location":"api_reference/properties/page_props/","text":"Page Properties \u00b6 Info The official Notion API docs for page properties can be found here . PCheckbox dataclass \u00b6 Bases: ObjectProperty A representation of a checkbox property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. checked bool Whether the checkbox is checked or not. type PropTypes The type of the property which will always be PropTypes.CHECKBOX . PCreatedby dataclass \u00b6 Bases: ObjectProperty A representation of a created by property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. created_by User The user that created this page. type PropTypes The type of the property which will always be PropTypes.CREATED_BY . PCreatedTime dataclass \u00b6 Bases: ObjectProperty A representation of a created time property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. created_time datetime The time the page was created. type PropTypes The type of the property which will always be PropTypes.CREATED_TIME . PDate dataclass \u00b6 Bases: ObjectProperty A representation of a date property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. date Optional [ Date ] The date stored in the property. type PropTypes The type of the property which will always be PropTypes.DATE . PEmail dataclass \u00b6 Bases: ObjectProperty A representation of a email property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. email str The email stored in the property. type PropTypes The type of the property which will always be PropTypes.EMAIL . PFiles dataclass \u00b6 Bases: ObjectProperty A representation of a files property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. files list [ File ] The files stored in the property. type PropTypes The type of the property which will always be PropTypes.FILES . PFormula dataclass \u00b6 Bases: ObjectProperty A representation of a formula property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. value_type Literal ['boolean', 'date', 'number', 'string'] The data type of the result of the calculation. value Optional [ Union [ bool , int , float , str , Date ]] The result of the calculation. type PropTypes The type of the property which will always be PropTypes.FORMULA . PLastEditedBy dataclass \u00b6 Bases: ObjectProperty A representation of a last edited by property of a page. Attributes: Name Type Description id str The id of the property. last_edited_by User The user that last edited this page. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.LAST_EDITED_BY . PLastEditedTime dataclass \u00b6 Bases: ObjectProperty A representation of a last edited time property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. last_edited_time datetime The time the page was last edited. type PropTypes The type of the property which will always be PropTypes.LAST_EDITED_TIME . PMultiselect dataclass \u00b6 Bases: ObjectProperty A representation of a multi select property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. options list [ Option ] The selected options. type PropTypes The type of the property which will always be PropTypes.MULTI_SELECT . PNumber dataclass \u00b6 Bases: ObjectProperty A representation of a number property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. number Optional [ Union [ int , float ]] The number stored in the property. type PropTypes The type of the property which will always be PropTypes.NUMBER . PPeople dataclass \u00b6 Bases: ObjectProperty A representation of a people property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. people list [ User ] The people. type PropTypes The type of the property which will always be PropTypes.PEOPLE . PPhonenumber dataclass \u00b6 Bases: ObjectProperty A representation of a phone number property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.PHONE_NUMBER . PRelation dataclass \u00b6 Bases: ObjectProperty A representation of a relation property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. relations list [ str ] The ids of the pages this property relates to. has_more bool Denotes whether there are more relations. If True , to get the rest of the relations, use the retrieve_prop method on the instance of a Page . type PropTypes The type of the property which will always be PropTypes.RELATION . PRollup dataclass \u00b6 Bases: ObjectProperty A representation of a rollup property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. value_type Literal ['number', 'date', 'array', 'unsupported', 'incomplete'] The type the result of the calculation is. value Union [ int , float , Date , list [ Any ]] The result of the calculation. function RollupFunctions The function which is used for the calculation. type PropTypes The type of the property which will always be PropTypes.ROLLUP . PRichtext dataclass \u00b6 Bases: ObjectProperty A representation of a rich text property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. text (str): The text without styling. rich_text list [ RichText ] The text with styling. type PropTypes The type of the property which will always be PropTypes.RICH_TEXT . PSelect dataclass \u00b6 Bases: ObjectProperty A representation of a select property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. option Optional [ Option ] The selected option, if any. type PropTypes The type of the property which will always be PropTypes.SELECT . PStatus dataclass \u00b6 Bases: ObjectProperty A representation of a status property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. status Optional [ Option ] The selected status, if any. type PropTypes The type of the property which will always be PropTypes.STATUS . PUrl dataclass \u00b6 Bases: ObjectProperty A representation of a url property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. url Optional [ str ] The URL. type PropTypes The type of the property which will always be PropTypes.URL .","title":"Page Properties"},{"location":"api_reference/properties/page_props/#page-properties","text":"Info The official Notion API docs for page properties can be found here .","title":"Page Properties"},{"location":"api_reference/properties/page_props/#props.page_props.PCheckbox","text":"Bases: ObjectProperty A representation of a checkbox property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. checked bool Whether the checkbox is checked or not. type PropTypes The type of the property which will always be PropTypes.CHECKBOX .","title":"PCheckbox"},{"location":"api_reference/properties/page_props/#props.page_props.PCreatedby","text":"Bases: ObjectProperty A representation of a created by property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. created_by User The user that created this page. type PropTypes The type of the property which will always be PropTypes.CREATED_BY .","title":"PCreatedby"},{"location":"api_reference/properties/page_props/#props.page_props.PCreatedTime","text":"Bases: ObjectProperty A representation of a created time property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. created_time datetime The time the page was created. type PropTypes The type of the property which will always be PropTypes.CREATED_TIME .","title":"PCreatedTime"},{"location":"api_reference/properties/page_props/#props.page_props.PDate","text":"Bases: ObjectProperty A representation of a date property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. date Optional [ Date ] The date stored in the property. type PropTypes The type of the property which will always be PropTypes.DATE .","title":"PDate"},{"location":"api_reference/properties/page_props/#props.page_props.PEmail","text":"Bases: ObjectProperty A representation of a email property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. email str The email stored in the property. type PropTypes The type of the property which will always be PropTypes.EMAIL .","title":"PEmail"},{"location":"api_reference/properties/page_props/#props.page_props.PFiles","text":"Bases: ObjectProperty A representation of a files property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. files list [ File ] The files stored in the property. type PropTypes The type of the property which will always be PropTypes.FILES .","title":"PFiles"},{"location":"api_reference/properties/page_props/#props.page_props.PFormula","text":"Bases: ObjectProperty A representation of a formula property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. value_type Literal ['boolean', 'date', 'number', 'string'] The data type of the result of the calculation. value Optional [ Union [ bool , int , float , str , Date ]] The result of the calculation. type PropTypes The type of the property which will always be PropTypes.FORMULA .","title":"PFormula"},{"location":"api_reference/properties/page_props/#props.page_props.PLastEditedBy","text":"Bases: ObjectProperty A representation of a last edited by property of a page. Attributes: Name Type Description id str The id of the property. last_edited_by User The user that last edited this page. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.LAST_EDITED_BY .","title":"PLastEditedBy"},{"location":"api_reference/properties/page_props/#props.page_props.PLastEditedTime","text":"Bases: ObjectProperty A representation of a last edited time property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. last_edited_time datetime The time the page was last edited. type PropTypes The type of the property which will always be PropTypes.LAST_EDITED_TIME .","title":"PLastEditedTime"},{"location":"api_reference/properties/page_props/#props.page_props.PMultiselect","text":"Bases: ObjectProperty A representation of a multi select property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. options list [ Option ] The selected options. type PropTypes The type of the property which will always be PropTypes.MULTI_SELECT .","title":"PMultiselect"},{"location":"api_reference/properties/page_props/#props.page_props.PNumber","text":"Bases: ObjectProperty A representation of a number property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. number Optional [ Union [ int , float ]] The number stored in the property. type PropTypes The type of the property which will always be PropTypes.NUMBER .","title":"PNumber"},{"location":"api_reference/properties/page_props/#props.page_props.PPeople","text":"Bases: ObjectProperty A representation of a people property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. people list [ User ] The people. type PropTypes The type of the property which will always be PropTypes.PEOPLE .","title":"PPeople"},{"location":"api_reference/properties/page_props/#props.page_props.PPhonenumber","text":"Bases: ObjectProperty A representation of a phone number property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. type PropTypes The type of the property which will always be PropTypes.PHONE_NUMBER .","title":"PPhonenumber"},{"location":"api_reference/properties/page_props/#props.page_props.PRelation","text":"Bases: ObjectProperty A representation of a relation property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. relations list [ str ] The ids of the pages this property relates to. has_more bool Denotes whether there are more relations. If True , to get the rest of the relations, use the retrieve_prop method on the instance of a Page . type PropTypes The type of the property which will always be PropTypes.RELATION .","title":"PRelation"},{"location":"api_reference/properties/page_props/#props.page_props.PRollup","text":"Bases: ObjectProperty A representation of a rollup property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. value_type Literal ['number', 'date', 'array', 'unsupported', 'incomplete'] The type the result of the calculation is. value Union [ int , float , Date , list [ Any ]] The result of the calculation. function RollupFunctions The function which is used for the calculation. type PropTypes The type of the property which will always be PropTypes.ROLLUP .","title":"PRollup"},{"location":"api_reference/properties/page_props/#props.page_props.PRichtext","text":"Bases: ObjectProperty A representation of a rich text property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. text (str): The text without styling. rich_text list [ RichText ] The text with styling. type PropTypes The type of the property which will always be PropTypes.RICH_TEXT .","title":"PRichtext"},{"location":"api_reference/properties/page_props/#props.page_props.PSelect","text":"Bases: ObjectProperty A representation of a select property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. option Optional [ Option ] The selected option, if any. type PropTypes The type of the property which will always be PropTypes.SELECT .","title":"PSelect"},{"location":"api_reference/properties/page_props/#props.page_props.PStatus","text":"Bases: ObjectProperty A representation of a status property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. status Optional [ Option ] The selected status, if any. type PropTypes The type of the property which will always be PropTypes.STATUS .","title":"PStatus"},{"location":"api_reference/properties/page_props/#props.page_props.PUrl","text":"Bases: ObjectProperty A representation of a url property of a page. Attributes: Name Type Description id str The id of the property. name str The name of the property. url Optional [ str ] The URL. type PropTypes The type of the property which will always be PropTypes.URL .","title":"PUrl"},{"location":"usage/database/","text":"Working with Notion Databases \u00b6 Notion databases are represented by the Database class. Retrieiving a Database \u00b6 Note It's best practice to use the NotionClient in a context manager. This will help clean up any resources left after the usage of client is finished. Alternatively, you can use the client without a context manager, but just remember to close the client with client.close() . with NotionClient () as client : db = client . retrieve_db ( \"your-db-id\" ) Creating a Database \u00b6 To create a database, create a new instance of Database and serialize it and pass the serialized dictionary to the client. from nopy.objects import Database from nopy.props import PageParent , Text db = Database ( rich_tite = [ Text ( plain_text = \"DB Title\" )] ) # Adding a parent is a MUST. db . parent = PageParent ( \"page-id\" ) with NotionClient () as client : serialized_db = db . serialize () created_db = client . create_db ( serialized_db ) Editing a Database \u00b6 To edit a database, simply edit the attributes available on a Database instance. Once you're done with your edits, call the update() method on the instance to actually update Notion with the new details regarding the database. Any changes made before the call to update() will be reflected. from nopy.props import File , Emoji # Retrieiving database. ... # Editing the database title. db . title = \"New title\" # Setting a new cover. db . cover = File ( url = \"url-to-cover-image\" ) # Setting a new icon. db . icon = Emoji ( emoji = \"\ud83d\ude0e\" ) # Updating Notion. updated_db = db . update () # Alternatively, you can update the database in place db . update ( in_place = True ) A Note on Editing Rich Text Attributes \u00b6 All the objects where there's a rich text attribute will have an attirbute which is the combined plain text as well as a rich_* version which is a list of RichText objects. db . description # The combined plain text. db . rich_description # List of RichText objects. Editing either will work, but there are a few differences. Editing the attribute with the combined plain text directly, will end up creating a simple text with no styling or extra features such as mentions etc. If you need those, edit the the corresponding rich_* attribute instead. # Creates no styling or anything of the sort in Notion. db . description = \"New description\" # This makes the 'New' in the description appear bold in Notion. annotations = Annotations ( bold = True ) txt_1 = Text ( plain_text = \"New\" , annotations = annotations ) txt_2 = Text ( plain_text = \"description\" ) db . rich_description = [ txt_1 , txt_2 ] Pages in a Database \u00b6 Retrieving Pages \u00b6 For getting all the pages in database use the get_pages() method on a Database instance. This returns a generator that yields a single page at a time. Learn About Generators Refer this excellent article on generators in Python to learn more about them: Introduction To Python Generators # Retrieving a database. ... for page in db . get_pages (): print ( page . title ) # Page title To get a list of pages instead of a generator: # Using the list constructor pages = list ( db . get_pages ()) # Or using list comprehensions pages = [ page for page in db . get_pages ()] Creating Pages \u00b6 To create a page in a database, use the create_page method on a Database instance. from nopy.objects import Page # Retrieving a database ... new_page = Page () new_page . title = \"New Page in DB\" created_page = db . create_page ( new_page ) Querying a Database \u00b6 To query a database, use the query() method. The query method requires either a dictionary or a Query object. from nopy.filters import Filter , NumberFilter , TextFilter from nopy.sorts import PropertySort from nopy.query import Query # Retrieivng a database ... # Creating the filters and sorts filter_one = Filter ( prop = \"prop-id-or-name-or-prop-instance\" , filter = TextFilter ( contains = \"awesome\" )) filter_two = Filter ( prop = \"prop-id-or-name\" , filter = NumberFilter ( less_than = 4 ) ) sort = PropertySort ( property = \"prop-id-or-name-or-prop-instance\" , direction = \"ascending\" ) # Creating the query query = Query ( and_filters = [ filter_one , filter_two ], sorts = [ sort ] ) for page in db . query ( query ): print ( page . title ) All the possible filters and sorts can be found here .","title":"Databases"},{"location":"usage/database/#working-with-notion-databases","text":"Notion databases are represented by the Database class.","title":"Working with Notion Databases"},{"location":"usage/database/#retrieiving-a-database","text":"Note It's best practice to use the NotionClient in a context manager. This will help clean up any resources left after the usage of client is finished. Alternatively, you can use the client without a context manager, but just remember to close the client with client.close() . with NotionClient () as client : db = client . retrieve_db ( \"your-db-id\" )","title":"Retrieiving a Database"},{"location":"usage/database/#creating-a-database","text":"To create a database, create a new instance of Database and serialize it and pass the serialized dictionary to the client. from nopy.objects import Database from nopy.props import PageParent , Text db = Database ( rich_tite = [ Text ( plain_text = \"DB Title\" )] ) # Adding a parent is a MUST. db . parent = PageParent ( \"page-id\" ) with NotionClient () as client : serialized_db = db . serialize () created_db = client . create_db ( serialized_db )","title":"Creating a Database"},{"location":"usage/database/#editing-a-database","text":"To edit a database, simply edit the attributes available on a Database instance. Once you're done with your edits, call the update() method on the instance to actually update Notion with the new details regarding the database. Any changes made before the call to update() will be reflected. from nopy.props import File , Emoji # Retrieiving database. ... # Editing the database title. db . title = \"New title\" # Setting a new cover. db . cover = File ( url = \"url-to-cover-image\" ) # Setting a new icon. db . icon = Emoji ( emoji = \"\ud83d\ude0e\" ) # Updating Notion. updated_db = db . update () # Alternatively, you can update the database in place db . update ( in_place = True )","title":"Editing a Database"},{"location":"usage/database/#a-note-on-editing-rich-text-attributes","text":"All the objects where there's a rich text attribute will have an attirbute which is the combined plain text as well as a rich_* version which is a list of RichText objects. db . description # The combined plain text. db . rich_description # List of RichText objects. Editing either will work, but there are a few differences. Editing the attribute with the combined plain text directly, will end up creating a simple text with no styling or extra features such as mentions etc. If you need those, edit the the corresponding rich_* attribute instead. # Creates no styling or anything of the sort in Notion. db . description = \"New description\" # This makes the 'New' in the description appear bold in Notion. annotations = Annotations ( bold = True ) txt_1 = Text ( plain_text = \"New\" , annotations = annotations ) txt_2 = Text ( plain_text = \"description\" ) db . rich_description = [ txt_1 , txt_2 ]","title":"A Note on Editing Rich Text Attributes"},{"location":"usage/database/#pages-in-a-database","text":"","title":"Pages in a Database"},{"location":"usage/database/#retrieving-pages","text":"For getting all the pages in database use the get_pages() method on a Database instance. This returns a generator that yields a single page at a time. Learn About Generators Refer this excellent article on generators in Python to learn more about them: Introduction To Python Generators # Retrieving a database. ... for page in db . get_pages (): print ( page . title ) # Page title To get a list of pages instead of a generator: # Using the list constructor pages = list ( db . get_pages ()) # Or using list comprehensions pages = [ page for page in db . get_pages ()]","title":"Retrieving Pages"},{"location":"usage/database/#creating-pages","text":"To create a page in a database, use the create_page method on a Database instance. from nopy.objects import Page # Retrieving a database ... new_page = Page () new_page . title = \"New Page in DB\" created_page = db . create_page ( new_page )","title":"Creating Pages"},{"location":"usage/database/#querying-a-database","text":"To query a database, use the query() method. The query method requires either a dictionary or a Query object. from nopy.filters import Filter , NumberFilter , TextFilter from nopy.sorts import PropertySort from nopy.query import Query # Retrieivng a database ... # Creating the filters and sorts filter_one = Filter ( prop = \"prop-id-or-name-or-prop-instance\" , filter = TextFilter ( contains = \"awesome\" )) filter_two = Filter ( prop = \"prop-id-or-name\" , filter = NumberFilter ( less_than = 4 ) ) sort = PropertySort ( property = \"prop-id-or-name-or-prop-instance\" , direction = \"ascending\" ) # Creating the query query = Query ( and_filters = [ filter_one , filter_two ], sorts = [ sort ] ) for page in db . query ( query ): print ( page . title ) All the possible filters and sorts can be found here .","title":"Querying a Database"},{"location":"usage/page/","text":"Working with Notion pages \u00b6 Notion pages are represented by the Page class. Retrieiving a page \u00b6 Note It's best practice to use the NotionClient in a context manager. This will help clean up any resources left after the usage of client is finished. Alternatively, you can use the client without a context manager, but just remember to close the client with client.close() . with NotionClient () as client : page = client . retrieve_page ( \"your-page-id\" ) Creating a page \u00b6 To create a page, create a new instance of Page and serialize it and pass the serialized dictionary to the client. from nopy.objects import Page from nopy.props import PageParent , Text page = Page ( rich_tite = [ Text ( plain_text = \"page Title\" )] ) # Adding a parent is a MUST. page . parent = PageParent ( \"page-id\" ) with NotionClient () as client : serialized_page = page . serialize () created_page = client . create_page ( serialized_page ) Editing a page \u00b6 To edit a page, simply edit the attributes available on a Page instance. Once you're done with your edits, call the update() method on the instance to actually update Notion with the new details regarding the page. Any changes made before the call to update() will be reflected. from nopy.props import File , Emoji # Retrieiving page. ... # Editing the page title. page . title = \"New title\" # Setting a new cover. page . cover = File ( url = \"url-to-cover-image\" ) # Setting a new icon. page . icon = Emoji ( emoji = \"\ud83d\ude0e\" ) # Updating Notion. updated_page = page . update () # Alternatively, you can update the page in place page . update ( in_place = True )","title":"Pages"},{"location":"usage/page/#working-with-notion-pages","text":"Notion pages are represented by the Page class.","title":"Working with Notion pages"},{"location":"usage/page/#retrieiving-a-page","text":"Note It's best practice to use the NotionClient in a context manager. This will help clean up any resources left after the usage of client is finished. Alternatively, you can use the client without a context manager, but just remember to close the client with client.close() . with NotionClient () as client : page = client . retrieve_page ( \"your-page-id\" )","title":"Retrieiving a page"},{"location":"usage/page/#creating-a-page","text":"To create a page, create a new instance of Page and serialize it and pass the serialized dictionary to the client. from nopy.objects import Page from nopy.props import PageParent , Text page = Page ( rich_tite = [ Text ( plain_text = \"page Title\" )] ) # Adding a parent is a MUST. page . parent = PageParent ( \"page-id\" ) with NotionClient () as client : serialized_page = page . serialize () created_page = client . create_page ( serialized_page )","title":"Creating a page"},{"location":"usage/page/#editing-a-page","text":"To edit a page, simply edit the attributes available on a Page instance. Once you're done with your edits, call the update() method on the instance to actually update Notion with the new details regarding the page. Any changes made before the call to update() will be reflected. from nopy.props import File , Emoji # Retrieiving page. ... # Editing the page title. page . title = \"New title\" # Setting a new cover. page . cover = File ( url = \"url-to-cover-image\" ) # Setting a new icon. page . icon = Emoji ( emoji = \"\ud83d\ude0e\" ) # Updating Notion. updated_page = page . update () # Alternatively, you can update the page in place page . update ( in_place = True )","title":"Editing a page"},{"location":"usage/properties/","text":"Working with Properties \u00b6 Properties on a database or page can be interacted with by using an instance of Properties . All database and page instances have a properties attribute. Info The below examples use a database, but all of them are applicable to pages as well unless specifically stated otherwise. Database and Page Properties \u00b6 There are three kinds of properties: common properties database properties page properties Note Common properties aren't exactly properties, but rather they are common objects that are used within the database and page properties. Some of them such as File are also used directly within the metadata of Notion objects. All database properties (prefixed with DB ) and page properties (prefixed with P ) have a type on them which is the property type. All the available property types can be found here . Furthermore, they all have a name and an id . Basics of Properties \u00b6 Finding the number of properties in a databse/page: num_of_props = len ( db . properties ) Checking if a property exists: # Checking with the instance of a property prop in db . properties # Checking with the name/id of a property \"property-name-or-id\" in db . properties Iterating through all the properties: for prop in db . properties : ... # Work with the property Getting Properties from a Database/Page \u00b6 prop = db . properties . get ( \"prop-id-or-name\" ) # Access like a dictionary prop = db . properties [ \"prop-id-or-name\" ] Adding Properties To a Database/Page \u00b6 To add a property, simply use the add() method on a Properties instance. # Retrieving a database ... new_prop = DBNumber ( name = \"Number prop\" ) db . properties . add ( new_prop ) db . update () Warning While properties can be accessed using the square notation like in dictionaries, they can NOT be set using square notations. That is, the following WILL raise an errror: db.properties[some-key] = prop Deleting Existing Properties \u00b6 Simply use the pop() method on a Properties instance. # Retrieving a database ... deleted_prop = db . properties . pop ( \"prop-id-or-name-or-prop-instance\" ) db . update () Warning Deleting properties like this only works on databases. Deleting a property like this on a page does nothing. Editing Existing Properties \u00b6 To edit a property, directly edit the property instance. # Retrieving a database ... existing_select_prop = db . properties . get ( \"prop-id-or-name\" ) existing_options = existing_select_prop . options # A list of Option instances # Removing last option existing_options . pop () db . update () The above method can NOT be used to edit the names of properties. To edit the names, first pop the property from the database properties, edit the name and then add it back again. # Retrieving a database ... prop = db . properties . pop ( \"prop-id-or-name-prop-instance\" ) prop . name = \"New property name\" db . properties . add ( prop )","title":"Properties"},{"location":"usage/properties/#working-with-properties","text":"Properties on a database or page can be interacted with by using an instance of Properties . All database and page instances have a properties attribute. Info The below examples use a database, but all of them are applicable to pages as well unless specifically stated otherwise.","title":"Working with Properties"},{"location":"usage/properties/#database-and-page-properties","text":"There are three kinds of properties: common properties database properties page properties Note Common properties aren't exactly properties, but rather they are common objects that are used within the database and page properties. Some of them such as File are also used directly within the metadata of Notion objects. All database properties (prefixed with DB ) and page properties (prefixed with P ) have a type on them which is the property type. All the available property types can be found here . Furthermore, they all have a name and an id .","title":"Database and Page Properties"},{"location":"usage/properties/#basics-of-properties","text":"Finding the number of properties in a databse/page: num_of_props = len ( db . properties ) Checking if a property exists: # Checking with the instance of a property prop in db . properties # Checking with the name/id of a property \"property-name-or-id\" in db . properties Iterating through all the properties: for prop in db . properties : ... # Work with the property","title":"Basics of Properties"},{"location":"usage/properties/#getting-properties-from-a-databasepage","text":"prop = db . properties . get ( \"prop-id-or-name\" ) # Access like a dictionary prop = db . properties [ \"prop-id-or-name\" ]","title":"Getting Properties from a Database/Page"},{"location":"usage/properties/#adding-properties-to-a-databasepage","text":"To add a property, simply use the add() method on a Properties instance. # Retrieving a database ... new_prop = DBNumber ( name = \"Number prop\" ) db . properties . add ( new_prop ) db . update () Warning While properties can be accessed using the square notation like in dictionaries, they can NOT be set using square notations. That is, the following WILL raise an errror: db.properties[some-key] = prop","title":"Adding Properties To a Database/Page"},{"location":"usage/properties/#deleting-existing-properties","text":"Simply use the pop() method on a Properties instance. # Retrieving a database ... deleted_prop = db . properties . pop ( \"prop-id-or-name-or-prop-instance\" ) db . update () Warning Deleting properties like this only works on databases. Deleting a property like this on a page does nothing.","title":"Deleting Existing Properties"},{"location":"usage/properties/#editing-existing-properties","text":"To edit a property, directly edit the property instance. # Retrieving a database ... existing_select_prop = db . properties . get ( \"prop-id-or-name\" ) existing_options = existing_select_prop . options # A list of Option instances # Removing last option existing_options . pop () db . update () The above method can NOT be used to edit the names of properties. To edit the names, first pop the property from the database properties, edit the name and then add it back again. # Retrieving a database ... prop = db . properties . pop ( \"prop-id-or-name-prop-instance\" ) prop . name = \"New property name\" db . properties . add ( prop )","title":"Editing Existing Properties"}]}